%!PS-Adobe-2.0
%%Creator: dvips(k) 5.99 Copyright 2010 Radical Eye Software
%%Title: thesis.dvi
%%CreationDate: Sat Jul  2 21:10:44 2011
%%Pages: 15
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX12 CMR12 CMTI12 CMSY10 CMCSC10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips thesis.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.07.02:2110
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 455 2011-01-30 11:19:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.07, 2009/04/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    0 exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop 0 Lineto
      n { 2 copy moveto pop 0 Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop 0
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 350 2010-06-18 05:18:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.02, 2010/06/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/UniqueID 5087402 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 49 /one put
dup 50 /two put
dup 97 /a put
dup 104 /h put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC720325C693C3162083155753E27FD36B4
9A0561A1302E8F7917EC99DF0D04321B834B21805EF51C5C3F8184C24962B053
EBB67B9D376EB259F4C10CAD26E5F020125E2F95B5C910185BC34AAC6722E133
78AC84A44F9B5F4E39D600BC838391D7BA0AA3D35B278235FFF9A707E8DA8344
D576CA1AF401D01E56B57672D5F64F33ED898277CE7C6A00090A973CAC4A0FE3
595C5D7E2FE528C85539D2FB653AA5B92B3B7349934E69E48EB70222D8B9D529
81FA0472172FF142BC4FA62D0F0B0475D987BDE5267014B51270E35CA1B6EDD7
662F6C22C2737A810763C5244D23FE23F4830EFED86961E217E6F70BA375170E
F2DC48A61C29DC7ACCFF3FD34A29AC7925E470139C70317085A439BC0397A666
AB0B8B0CC40A31FCDFC8FFEBA2757FD789D18DA69FC47CB16F124058792AF2C2
ABC08B856628F8E732D208E548C4CB41140443D32993D3A7F4FC6E6E32A6E093
2074325629DBE741C8D1ACBB5EC9D7BEA5B06B46CD8C8315BBA3A85B2F0476C9
E830425C684C2563E19255A9AF771B06FDF43BFEF593FAA6DE6EE7CC677E1566
AA000AF28740CBB7CFF96412CFDAE7106549E027F8839BCE260D8CB39FDF96A7
8AB04B2362A8402722083907CD53627CC305BA1D5CA513574E911040F52528C2
DF812BB1ECCC04F24D173304A007DE29F48848FDC66ACDC9D1288C2DEBB39D52
25B43B33049D4CE1A5CFC9332EF640AC7A28B262433F4259B36C99FDB8241B7B
E231FBF3F44B41FBCB8B3EA050A28ACD10E4CBE09BCBAE9B32E12B634075DF4F
80CA273D67E589DE38FF6B5E81527E24979F754A4AF5BFB03345E151D43E045C
1380B1AED61078D9D1AE655692022D7D4B102417AFCAB3A242E27D5D90EDF517
351A9369CA7270937C18DC84AE4C8541892EBB7D10F346A5568D54DB5F28F0AC
79158C6510C5318901A9C3F2941F72ACD2BACFB91DE89DD6DB72335C2CAA674D
EF7B6178CFFD3F8879E66DA7137B92AC883CE9BBA19ABAF9C6ACBB7A3BE8A542
4D243AA8BC7E2139A47F9542D04C5FD4A08B1E178C9F904555E24C1A7FE56B29
4BEC02E500996A31046D7FFD6542EC35CD3273940D2D737D0D62250699213523
1BE12435927D6C3EFBBFDCE1909E4B3CC1A9CE27B2C1EDDB20EAF7A518E5075E
27EAC8343DB28FE8B6E5A702BB3D4583D578F841BF82E5B0A10303A54FF65730
C4002A8D250D74E34EB886391AD2982634835A9504E8AA4CAC7D5FF01B669D17
1DDDF1F1DCABA6457E30C2EE632B9405FA0CAB242DE1525ED644A526B963DCEB
2AB627558D4D7EFB757EF9465924EC77CBE3F7BD33B6759C59A2CB5645DEB882
EEFF7DF227D0319DEAB634510BE6ECCBDFF03808473E694BF5FACFB283691B1D
AA8F11D9B0A23D20E7424A796F7C4E0F872D99051CE6B19A2E7C322237EDC95A
DBF34DD0E946277E45429E426A77181E6610C46C6F1335A4A73D7437AFCBF9A4
49A7BDFBD2CE2BF0072DD6CA563074FEA7EE6AC63F07E92D5FEDA4B2712A2D2E
F60E3F081997B61D21533C90F6C58052B56CF2209570A76591AE9A399FFA579B
EA8F5E44B381140708FB5C228E26C24D393DF4BE229DCD1BC98CEE70C93260B7
C2672766A6D49005AFCD38F3B934781810E6FC39062A3606868AA33EF6661737
8775FDD8BEB545CCDD355305D08DA868306436DCDA3FEAFF364EB771514AE03B
3559D57CC76239230474E44422744B78C6E9025760002E717524FE772A8BC40F
FCBA9F7F9713F521697FC0508CD497E64417C7A9C45E8778885F778228616E30
B7A7CA92C6054010B1942E2B13EC164500D64D0FF839FA3D129F71A6479E85E7
5BC09A3606E0BAD179C3AE1EE97233D7164C340BA5EB07F766B5C4293671DAD9
C3108824447506496720A532FFFB114074EC83BF19FC952FF8D47DC163B03FA7
7234197CA24673CB44E2B1A7FE61820C1EF2EE4B90C3C9D36D32B1356C894AC6
7967CD6F535C4CE9373058943E9A1239816E6A6607586172FBC0B85A9E7DB72D
0218F962897D980A59B7702DA5B20B97C4076A8162655B8811D215450EEFA333
62BC74964BAE2C6775BE3DE6DDED2F1B7CBB8DBE8384449FD40E96EF7426CE51
F33BF3D2013B0B1D511447647EC91627D83A69D61919217E2B9157928B1135DE
B539DB16160B230EC0AE6211878720825C07F9A5F869E4AC845561F5BC033A20
4604EB56F16C5AFF3F6C166AA899ABF740574E6DC8FB9B43D1AB67E0C11D04BF
4B17F18E7B2C2E74ED5C2D1BF8B506A3BA8906D091E85CB12E60596FEAB8C917
AE6BF26113DD7FD74791AEC9FFD1F5741A86DE00EB3884A72DAFC8E9B3A98235
986C3A087FC6B9FBB00B96784205E1B159C3A80916DCD6B64925D90CD05B5288
EF3FA1164A3E5E5467D74BD5271749EB70663DD0F7A73FC01CEB6D1D38BDD6FC
90BB3478B137D3DEB677BC1AE4BBD04307E8BBA70302F1837AF4664CF75FBF20
93FEB34EE950AD46C2D30F5007BBCAA5D7E1A7246A3162143B3F454CD99C1580
9A26CBDF2D7DFBC90BCDFBF4D0DE5842FCE930FFA0D5CDE59D1EAD936FDA6F69
F15D3514A84D8C0ACDC26E4AD82A75DF1DC70E6266893741DF91EBA8977C4BD2
D372701A1C1E60987085FCC14AFB92C969C1DD9F1CE888D8FA944430E684FDB1
F2E7B7499EFEB1EB9C339788087FC0B2E789DEEFC6515A95FD236FFAED2EE0E2
99C71EAD5223435B52E71805524360E83E676C76017B6EB14A0053E9368A2E68
1BD705C996A7C573B15C520F9754CF2580EDB346D51AD53BDFE8F8747DBF0FDD
0A6C9AF2B75A60FFEE8C2B35B7885E4D95CC54ADCB71BB7F88108C325F49A01A
59144423EDCDAB0A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/UniqueID 5000829 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 65 /A put
dup 67 /C put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F9803741E49217603F45AF366220D299DE85A0508D0717C6B
F11163BD8F0621055AF19529FA17706C1C0CE6A08C84FF50D42FE47F91FBB7C0
75B515E12AB563DF30F06E69DE564553A2A0EBCC7E875A649656DE0C986ACDB8
60B1B84DB9BCEECCD83F382E45211576133DBBDA5CC4582CC3218E63D9A9F8C8
1F1A4ECF1D881CD77FFAF275CFB0D96F60F6ED768BD87C1806BB162028CF9D79
ED3F21E23B4554E19407D4A864472E90A42B6F41EAFB6A2DD46609E9A78487CB
C560C89F0C83AF7745D914324C6B643803A47CDBA682D9039A73301D8EBE7FAC
67B4BD470C85AE4C6C9A353EBE7FAE21C318987F8E7B756F708B61A940FBFCD2
6D87F92730C0E4302EAABF4EC427633D901C38728C7192AA9B07FE46FA963C9E
FD94B5719D301A3F0A68D25342DE4962DE6D2C0CDFC0FE93F2F482B39C51D812
8E7832D473B7AE698A600EEB9917CCD5D84A3C442DDBDE5B9A078C7DDE3C1522
1140AFCFD1AA6E87F704E97ACED68038692A30F1CAB4AFD35A3EEFAFB48948F5
212C24220F3C685663AC8E0C3C47D4BCB6E5C37F2ABF310DB6331002CBCFE8C8
8DE15410E26959B0D44E4B80D61080D94A4FA9015EEFD9D59D2369FCBFF7235C
DA392F875276F57244446ECE01AF222255F99640E36AA71D4111CB89A0CAC1EA
412EB5EAAAD0C9609F7ACB17DE9EF3BC80AF04172BB4752A663C6EA95544C939
7B6AD4E250ED45BEA37880A2610C9432EDA77EF779C8C25889660906E7F7F792
932EBF8B140AB985F68A03CD2C3CD18725A57CFD1D1E66F75A522CCBF5B0741A
EA93D8016B9CF0152F7681FEBA542CF7282FA15DA60151FED6E8EC91DD6956FC
9181B8E040190D1EAFC539580B139297476ACE27E2C94BCD76508AA4DE6A5A77
4C11DD0CF5CAD895ACED57F942129D597F784184C470BFC4D2CB65480514E46B
6684C53DA5F5A485C8339FFE47E476763E458048A82F21DE3C1E603FA1E5B07C
5DE8F11F9E31C6F158DE3DA5F0E0E54A3932AB43A6EBF44C55EAE85A575FC58C
85148AFD08FB573709DD244E9255C4EC44468FF7F16691A61DD57F33654D8AE5
FE730C475CFFC038877F2205304765D9916FF6E69A138226A02C154F7ECD5251
A819C4E63C2B25854DB76AF5EB7D5D4F5FCCCBC488AABFEF7FEB215197F3CA60
9E646331A98CFE0A9F3FEF84037FBC9C6009E950F8B73228F0F9FCF619346EFD
FA95880B1ED454824ADA2771EDF12182BD67C3375A760ED79E24089C3D2E4610
552238B06144A104700E5C4CB5A0A9FA809DFB3F182CA473CA55C00046A43EDC
7985B9105A5EA006C2822280EA55757ED35D4D118554D9F4A10BA26D3C153D3A
8EF00435446964DF8AF2DCD7CC36398BB3B57C9ABE7A6FF634CE53DA3C5FEF88
0E8864EF50374161811612C1BD0C02BB5D225E86FE2C6ACC9A3AE6918AAB3447
07D37FF010CC2EE3D96F3268A061085775F2D22C1BD36349CA126A2A714D9D2E
781A6908D4BF6207AFCA327A393F01FE6918344CB4FF5B1B970C4E028955A3BC
55A8620D3FF9A1F97F635A72D2A33F584A3218F467854864390256DF0E89C1F4
4D09C8851DCF829A32CD113BBB6F2FB9BB488D880CB31C380FA970C3B86333D0
E691F398EC22EAFE13F5F301516DB19741E93C9DF882BF1EFD766A3FC95D65B7
E216C301AB8208BBBBB9AB3400E188F59B4A7B7F95E8FC38627D1F445A7D61C2
A6D462D8A4ED9CAFFA3D8B3DCAF8B19CE2022FA1991045703E784024BD8EB090
F264FF80947035BA03BD30CEAFB2DC56A337F576A01D084401DDFF359270DA1F
D7FBC9A7F22DEEF3B71D947B20225EA3E75EF7208441FD75B2F2BA1DDAAC0667
2D59FFD9E519C7FD2C8F95AB2B748E4F91DE176D43B34EFE97EC4D5D181A16B7
5D15F7915BC004105EB26CCDC5BE87E0F604D28FC8D1CB00650C36486CC1B5B3
A6D7738EE53CD2ECF4E48D9C7B9048CB206DF872684389DB2023D18E10C98F1D
17CA781FCC7102338A3A3E4EF988D20D7FB5E8C7671A61E2C9CFB1876573529A
09FF147E34E026DCBCF190EBA888115468DD2EFA860D280E91B3CFC2E433F9C4
332C67AAC52BFEF820E3B3DB7A1B76EFBAC46DDA9AC0FA9F53BA758AED36DAD4
443FE1DA48F9A596862A8970729E54E92E75E482915778952E090B4D0D6BD8AB
40AFAAD4470DC4D9FF02E6D8E176A1CFDDE24317A502D6B5D922F2C1665B9D0A
CEB3A62FFBEACAB14E9D978770306469DCDE4FBA62DC1FCD1D616A89B3ACF2CC
19FB9CCF9CCEBE7D86F07E69FDA704C5074B7D6BBD32811CF84B6613869860C9
4AB595EC59F91BACA09D0C7711531FA7284B17B5B519213DF874E05438412197
4EBA6B7897FAB7EBF4362713EE2A837B27812C8D285EAD3118831CB360264019
F7D93C441619CD0773442E4A479A5BFF86E5841BC6CE657C5AEE823F314E76DD
BCFBB62C12F2627921AB0C084A78F82DC74C513DA114CBA3B37C5D18C4D48E2F
EEC12FDF0AB64C178DA02847F18D6CD30966E4953E5965A908749C60E5058E7C
8ECF90797ECAB2C3B70794E84671B472F660FE82B0199DF5AF4ECD98F4178C82
85BDD5C90CDC1080D89BD4AC5AFD737E05D49C0F16F0CF6BDC9B4215359B95F9
7F56CCED04DD5D6B6371965528794DD0FB159212A2E155A7EC71478D036FA413
7233FF419FA1B4D832F510605D2B150D989B0B08B2511B2D6164E235B2BB2A3A
585CC8F06E619333FDEE52718C751F6448F6C35DCD4DD5C8B0EB55D00F2B69D8
F49FB480F67A248B0E6ACD80FCEB3153C00937EA699D02345D39D8450935FBDF
B900859A204BBD41C62F68A62F2E48B8E9A018537C0005EC91C56C0E4049ED97
20659275D102D37997317AC486F7AE68085B8A97B603B6F9F48FE3BB28BCAB65
C943441F312F05F7E93AE5C4C81F8D7B254F625F14AE926EBDD0A7CA2A34EF6C
CF47046C8C10997976D5613C5351705F5BCED1D9322DB9C73F8DE1586B014FB2
5023D4A09DC3BA152B66D05D0E3F9E07539C80467EB43659DE5FFEFAA1B48CF6
69B099D23E8EFFAB3059DE09D722CD25F86177442371B1C3BE70EEF67A144949
9948A9B72D8DA5FCF4ED2999558289BFF1F417A1938E58E23A578237C913BEBF
FBFD79732A6DD196F54F206C7835C39DA7EF6F7758038A58378A392393104E53
AD3917CE39142785C653C6A4C665D5DDEBA149AA1E643B1E437362A66B0B31DA
0E472F21BBE0557688D858A4E3A67C9141CBF2D348DEFE6B707017FF69E681D0
B5C3C46763CCFE5941C1F074CC072ABCDD670B49FF641116E1ADB763CB4688AF
9869F5E2F96FC1AC25CFA36E060381EA3ECCF3F978DAB4AE7ABAA63071BB192D
6C5F53705980E8E58476700D1C4BB4C683775965F1A7DDD60C60767DAC1EC208
D430024B96B5C792234B14FD8CFCBABEC4C5A7642BA98A4CB99DD78E2DBCCFBD
2671231400C5CC5A7594DA87DDF7A5CDF2BFF04EB6CBAF45EDDCD2D879A407A2
5112B01D1AF49DE952EF8B7ECC9044661987AC09D687E66122FA47C405EAEE83
343D3C354F6B9978C7FC06C4F55D6BE51B148BA08D89CD90F9983F07340D8214
7B1BFEBA745A2A55C1B54F8508CB226AF4D3FA47139876D16FAE9113F3D8561B
7682E266701D758C6079AF408270D75B78175D1574A7E08CA0282A4BAC326087
C66944F2A8264B3B70BAD60B5B281096CB1C3BB4B17557BBEC821DB27A0EA903
5D819679F78B7DEFB94FAD86DD32DD695B401887FE44C47AE1B637AFDB70F85B
BF3947899A036436EA33C419C472274CDEF1D1EB5157FABB4CF30591260D54B9
D75D59FFC2220A1C62AE1804FF254D9FAA4975DA4FC6002D19E35D036DA0E522
AABC5A779044AD848DA1D4A91F9A9A95E1E6D61E5D49585C2BC52827DCF7EBCC
B666DC3B1A2B35B2A9EBFFF45EEE2DE2379677AA52DD36F46CF07363C2127796
18EDEB83E4B493758AF784F40FA286358C28CB81C3C66F8A27D3747A77AAD2D2
978775B099583CD9DEF30D5D604F626946D419E521D77827E6EB19D82E675596
E2E1FB78A10EF34FB746C9CDF3123C15271D8A58060386A2256F29174477526C
609E1FD66B020CF908FD251DB06AB95DC3051B0812419492ED571CA274E3D4E9
6185AF440E9744F63E297BD2B7D4F0DCB8DD36AA117F96006C93E3947272F3F7
63690191EF7619C4A17D1D9E967E771A415C08FAC619397573B3E87AC0ADBD68
476812C6EF6CC8292542D01B54B3CFCEB3D3EEAB1782F6F90A337FBF47EC2EC3
DDA0F26DD6D2DF01678CCB6D8736411FB25D344ECDE4FD3407806D23DE9F6346
100086B1EE0C63104ADF34E31F711400FF82743AAC531D93EE3668CEC5552773
CBD0E0BE8FAA127CA508C46565EF3656C9BAE45ECC830F5CFAF8EA1D99C913C0
D87376ED32A6E0F9C870CEE387797FE262F0BB5F7D9B45640C81D616E8A3BC38
ABBE9430BC915F6D7646BB95DBAD96D17CF82DED8C42C93EE68BE02EA8F80D8B
39697DD6914CDA11EB78DF9145A7DF4451B2A3978F6382129F9616895279E505
6BC52DF2F766CB9037087CC14AB94788C3782CDC58CA38AFB5243D8861868532
CCAC1E009DC6B1E4EC62622CCB8F892996C0CA1D0D9A71CFA22BACD3675D6591
F96DF42EA4B89DE970BEDC2768A7564D778C28BE4ADA4B04128592AF75A7837E
60919A1E324410CBE191B94C61B828CD53912D6A6DBB7773F173729FB9DCC8CE
E0B2B60B55E6D1D0391F8BFD157C890965804BF827F7D12DE81D6081A85AE51D
A13F1450CC46768651EBC6FFE8B8AF7F02FCAEF50E1AA0BE97016E2F8F2B1922
2BCFF7EC7A5AD53B2265908D8EF4ACF5E59D6432F86C844A9D1F9C8474536B9B
413BC8025552C94A76F06ADCEA6D3D548E2A93F202E2D9F64148679D8A5E3C32
209F560F0679B4879DD338ED627DF2E0413F96F7AD07C7D31C34A49599967503
B2C81467AF2FC44092E1C152FA8C11B5FE4D2958B9A53ABCB5A7F1167200445E
F03EA4EED54720810BBA72773B81DE1A4E3A154D7B7AACF021D0259C4941C9FC
B8F7B8486B73DCFF4884BE5470920D31700ADA897B2DF9FB4B712ECE1497BDA0
3F2C71D3256C3E76811258470B8974C1A81A7AE70DD52E92F1EDA76D995529B7
6CC5A617FB8FE10E308B3451CC441D9C2943EBC5187838070BE764C6C2618F60
4547A033162C82614F398D86471B675827B9C8B75A772C49F5BBCEC967E5D5A5
66575DD1183915FD6BA3C6327A6E9F7D39B2A09DDF9C8E30B7828C2360039032
7FB367CDD8D2E0D9E68431A484B32E70BA1FFD3F0A0EF90615D7FE2E9EF13048
E8765AF547F0009E41B4C0B314EB3EC0FD9565F8D9D7418B4BD78FC790A50D62
F219C2AE37908FC2665A28CFFA687E8BFF01DA371D41985A0DD639D64FAF2A02
DADA827A2972F1180B20A11A9B61E4692AD9B9FF63063D892E782BA20C7BB1DA
054918198DB5859851C4EBAB24369A0C3856765EEEE0BDB0588E93101AEF33A4
B32028016C4AAA77E10BC3F64E3663B109851B5501EC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70CCD429EF7488E7E5C782C8311B03F19DC37
7EF382AEBDC3130A05259B885E07B50701A7A98C5B2D07896534AD7BCA233A7D
21FDCC48F92986F516F8F0DEBC65DBA894F62D4F97B71DB5E7997AA01BEB3633
8CB0ECF40BA2317EEF6E9C1990A0DB13C2E333EF5AB555D96857625F94704D50
B2458C230E667A48227B1E23C26B4279C37E2773FC98BE95AF020AAE36B57C52
44013011F77097628EF0DC35BBAF357A32CDCE079C1047F1E55E05DFE17806BB
D95A9F649546B511EB8A3C450D5149FBC48A0AA070B81D15F77A50455E7796E5
7440FAD312549981BFD94544F044C5370A36F1702139E5257A306B7106041F7D
16C6002434DEA4AD5499340AEAC2091800EA83179125623FA7AE4052DB2A3878
BA5E03901482DBB379B30188501CA82EF3CA876200D5A91540375B20D6E39827
BAB578D464F1E5474F9325D1C94F1083F8309001C544C77969BADE1100308894
C61D59EB583F14287CF79DB5FE005F0EB1221861DCA718A4280B24582D7E9975
C051254675C0086138E12770986B53DB5F308C7FF206710DDC3BDF448695036F
FFEE96738D5B2795D1AEC1FDCF07295D8970EE7D7B295E75F12624DDBA3FFDBF
9E425943057F2C0EF56EF19699060089E2B589440B61C4B471E8BC8C2354CA80
E6C3313FC4D6082CDC414FC12330A5375F39DCC20B289054D7FB175A768052E8
749A5EF7EAB74CE14800F1F95489EF691570D576A4E5E5C8BD0BAB64D64900C2
FAE06BE9CE6A225CA73987BCD27555150310CA9D872CD46D534EAA1C6CEFE63A
D2091A7E3E229FC321E07E10904D41062F6DFA7FB56CDEE1AAEA1C5D9A3201C0
1CBF8A09AC51EF2CB5911D03B3A8C23D0C8446389D5B32156103A853B0B40B7B
D8D50AD0ABFE9D4F5CE533584D08D2870D6190A5AD377076EC778713B4005D6B
5BE7AD248141A769EEBC629CF168C13E3D69212E49DF056D1F743E53901531E5
42EE19C1F8B7364FD8505FF4EF94E04FECA6083425E6BFB9C815C6BF6FF69804
90D8FC46D089481DDAF0ABFD1BD639B4A2A4E4495B9F65A44BD3CDD35CF7A9BF
FCE01C406E41567BF07BAB5B909083DE53D447C02C0AFCAA23E03F010C80983E
196E06F5627D26008BE9FE976507B85FCFADF7594FFC4B128A30BF4AF53CE784
3CDBF7795EB4101F2686AE89CD40CCD53903B7ED56CA715A2213F529E4C0576C
E4C09AB3E975D373ED8E190A1F6F93FA313C8EB96E557A62737587F530BA71E4
169037F8FDBB73403156C1EFC86F57BB4D643B1ACD8C1B4E905E3A9F04139C72
B67E089631AF99C98BB393F2349B22D9DFFE79BD17AE06FE75543C2FA6A4C882
84A2CE8FDDF20CDA61DB9B0417C8A169E0C0D079621938D83463A3C5E56BDE22
3615AC13A9BBEA0055A3249C54FDC7D766321BBAF2B36FC5A08CC6C37A103CB3
B835A3ECC3F07EE6FBF453BFFF7A54CF1305D180B5D651ED843723A25932C970
E92BBBA03A43635FF5BAC0F8AFF7140B28C9E446C7A246F31988A5EB477F32FC
EE2480C06F8CC54355C29133782B8CF0FEFC7A8955D871831F28BF6313DD404B
FC19842CB56CB99212DB2BA75AE95A8CF632084FB5C47E2C1A02297580EA7DC1
CC183AEC9EE2CFAD514492C753F2569C138A51C628F887433BEBAC3EC4AAEA5A
804091B2E600F0D05768783D6183286E72AAB1F65B5C09A407FCBEE002822DA8
35FA3B850C3F54C6B6DE950087C24E2B25CCE4655DE06962DA98F5E8D2CD0CCF
C9DFC6D2B040AD5C17717552061F9637CC4444675B8E72988ED7A05870E21D74
FA6B601CE42BB53F1FA77EA74787B62DA562CA4A3E21F70790679ACD42B6B498
C9F0F177E15338F16227AD641FF98792B96461E7780278343354509512D7DBBE
3C3795D9F722B2654453627CD83AE2C7C1D9D74EB10342B41CA82A126C284AC8
26A2020F1D080C9F05248D3FEF9D434921CF3B4F8EF5A25AC77725FC48517FE8
349FF88E124DDF023B6B84466607A26979DFABE988CBD56EEA2BB144D3EC6C45
BE6D1FB34A814431B52F0D05F8457C743B3107FE43233C1CBE9399B0281E934B
0E325B2032305552A7332A4892C63CF371DE72D0A8BFA952DC9B29EDC44221BF
59DD01D1D1881B4A37AA4CE77EA76896F7C5369D1B0E92F2D03BE48F2FAE6374
7A556CDC21F6642D67EBC1C3120B4E96B3E900B617A3C2E0F3704A52B600AA3B
E5869AA57A668137A968DF8EBC51CCEC494F481CC0B733A7AF39D1A90EA9A29A
C620949D5467A23D4DC5D48C3C31F57ED0A5B9FA277FD670368CB7D25BD0B8DB
1CFB1F214CBC437A0B1A669BFBEDC389824CA9700223308AAE6EC1F62F4F7D9E
B816C51BE041C5D2F525E6D48AF46B12D465189253D2F9F1BA8C84908654A966
4C3FE7E20CF594DFA5DD8340AB8179A55C99DF614AC878D2E6C3930756ABB679
4E5FF62C253E9DC13D271B8EC2A54C7FF65ED08175035502846DBCC7578B8DA1
2B58618BA2A179A4245A32B96DDFFC4807CB0B821AF5E81F9E7F01D0762885E1
66E9D628AA11A2D1257F213EB2C5A5B0D44FC860F2CCB1EE9DCFD62819535F35
75A72AFB85253384114544C51CD92F4FDBF6DA97F34A2FF179AD48EA48405158
309FD3047425174591BB61619F5BD222B3074EC4EA0CA838AA93375017FD656C
DB17F4A55BE367A58C5560BB3997831C12A6CC94842917D8ADF314872C2E6867
CA283F67A200C1821281F457928E33C132E6A398AC44FC8D3F413FCEC231F644
4E1EBDE73AE3CAD23BBA681E7ADB21442D0FA3C0E43E94BFD782AEDB7AB4379D
9A8CD43365CB6CEB0953DC37D8456E941C535F7BAEA9590E3004E0F54B4931DA
09464CCEFC7FC05E63663774371B42DB42C8DCFD7A370947EFB077358CF0BD44
8AB51E72211A1F165428E820D80E9F7B7735ECD8CC31EC214879061A5FECE4BF
16C642A99CD75664C467837E8C5CE5952A6E10046B6907F3FBC827E1F909D4E0
66C0801E6883AA9E76A56683AA07EC220BC12750C3875086B1B239D99D1FD188
BE5D2AAD1E3AA7DFA16BDD927409F90392E995EE4BD75D1A72EA11EA272C5C41
B1C0D06E984489223260E0E452E04867017B5D85E93A43AB4FC23B4171F78A70
ACB3B6134DF716E7B7E90FD0ECF72010F186EEE6E3F7F4B579526D6C15C0719C
10242356B0C2CBB4F2FC3DCEC55D467B66EEBCCA7F51CFBD6C53E9DB5BC778B0
AE733476FD9B5397BB114663D116934AFCC4FF4BC07437B5940BBE432A140D40
047D22C7A5C01DD64174B12D28A5B28930498AFFA86062A06B0E0AE21D69D986
25A54EEA10C7D1CB1E66AE9D846F11C4D6D65F83CE46AA99FECEA3271D3B7DC0
1D0FF83C04E8BB3CA6EC747251576E520A6BCB64F1D02416B9F2CF13938598D1
21DD93A7EF1E0D66D95CC0BF77F6584D4EE2C8C5DD8E8AAA12420D741F791831
E7E20E8491D61BF38FB13CC029AF64EF5D3AE03908AF2CFD2E49B73C7F25356A
C70CD5C4CC53EEE1E1DD8D212F32DCCE206DD78C1AB045EC91E6DEAEA513977D
E86A12D805D3F9E00553473A4CD8C83DB2DA68232B95E21C153E556208E0D4BD
120EFB729939F977AD312E3272D0D664C71ABA90657A2E77DED16C8DDAEC328E
EA717D68098188D27141942FF00971BD453E49E8309685EC76B2D5C388CE0FA8
1BFB26439DB0AFF321FF18AF6369CEAAAFF9AE41896D26DB1B222935687F63B2
422D42F288CFD92119D251D8A086E84A81477AD6962D2EC14B3AA8467B1B74F2
2C46BA91D59A48331292F84951EF4E05CE9EF796BBF902899DB7CAA2F5075E8D
106C1F9CF6B81DBA640D8C895C9D64826F2297C12192A4E4E45AB7A65138631D
C06886B0ED7A5B63DAACD5BAF4D3185B833B2ABA7D9539044DB51B57CD617BEC
F81C51930A30CE768C86D18486B563BA4CDE2A0BA729F19AC2142A6FEF1911FD
4E186AE6568392939EC58D5CAC4142E7C0F213D2414CA3F945C621B46F0DA5C7
0BF52489242EEBFFDFC869C1CF15C6761064E7986EF36CC6BB18880007593614
DC41E017A29BF880CB82DB5C6425D92FBD3991A9AB6E38E659A7542F8A610399
1B72F3B4F85E0C7F8A3B58BA5AF39B237C53D39C0EFA6DEEA646CCB7896146D3
99B156BC50A25240CAF50D9DCF340D0CD473B96702E05555BBD740D31A7C9309
2985578D75B05DB7C5F70D739734274C6C2E6237757F3E20C77DF86B654E8D4B
B263ACA44BB4B3E932FF7C2151FBBD824A8D02661C77356ACFF0C5795DF9AF43
A2A14107BD51C5726AE247E8EA90FFD4ECACB10572E066C8CAB192483CA049A9
822141DE6FF48450147C1550F6A95A4A91271B5553D9A8C016FA0656098E7A7E
821E453505B29C26607C33D4496DE2BAFBB67FD1BCD608F863396FE79AAFDFBD
287C37854C772493803616BB2593E45C4FE79CD065999B69BEF09BC644B591D4
64A57B0FD5FA84C8E10A36C780610978080D88BDBA17B26BB0E518E4A652EB38
5888CBCD6E78D5FBAE8FF8915190BC0F4360080A4C7FC4641A7669513908044D
0335924576FF9E0DF7A5E8EF5C5C52D0F5FADBB361E119C5E2083DCDE118893B
BA23A74D6D16AC7085E6BB7FFB83F72E1CDA7D32C8A846E3F4622E4E9E5EEEAA
4805E2A10A249B73FCBDF31BC9DDB9B0D00E6C3D5852B0B37BA4026F922A01BA
1B3301F4880F1BE9D973ED962770A4E5ABF82BD7078C8B8EFBA9F66BBE716A9B
BB803A2DEEDE9660349DC63A1B19784B6423ED32384F39A7FC5D0EE145DE7FD4
29DD86F82120CD70795BE264EE1B1150CAA1D03F98C3B3DEF2A2488263FEDC21
18DB0E32986AE94D26DDD574880656B31415D0F693120879A61FFBBD3E834F52
64B146D493256AD5507461D906514356E414275CD17C7F37B19714CF76B5384B
C33CA730EB5DA2BCD2C61BF2E06B3DE5FD0678AE169970C5316304BE014009F5
66331B52ACA50DB80C2034CC2EA13774DD36A136626AF23A6682579614F2F278
FE3882183437437CE1370A7EE8BB525B14D1A3F51297AE9588204D6EFEEBD85F
CA42CA5BD6E908FEF06C9695438B41EEA85B5C21FAC7E853FEBE5BF37412B92D
95B976478C25CD4D8822BDA1F3C55C43F7D740F38E1DAF45B5C6223BD8697951
1FFD425D10FACCC9D6A2046EDF115ADA7CFAE3A966D396D000E6DF1BE192E699
0EE815E8CA954ED986C18FE01B84C94BE3246B3BAC9A15E94104D0AECC882795
E96EE88255BF25E9288859C5117C3AA02310F15E3FB104E25A5E946CBD8AC2BD
E8A4BB62585E522DF857253A2CF5EC934A875DA5B0A96CF7128047FB5198FBAE
37C3C8DA6CCAE09829CD4F4B6BE4818B63B22EDC1B222B50CA59E826C3620A3D
33DA4587A716074AA0D6656EF71D26777A99E971B65206CD2F875B1285E51B0A
710E407FE07BDE8BBDB4299D7D055A75D3A1525A5997C8ABA71B7821737A644E
A98C8E95C5A4FADDCC72389E28DFE6162BA97B2CBB49FF9879A1DB36FC94AF4B
F20B21436560F9A8658142D9A879E1FD3AF53589A6B926C27FE3CDA5EF4FFD15
7443D9F1A73736970FFE0188986FF37CDC978BD8D3CF824D5149280D27BF828D
F188284157D096865743C7D1386D2F89ACC07666C101082D5A713EBF36E57E37
8B9BCBD2E97E234324D8FB99EE248639CBF336D1D517B98CEB43F743B523EF74
4C1E08AC9F4EBE737B865C71767BC4BEDAF0B17153796B432C43F3C73611D5EA
581487DDBC03B7F261B8419073936B19A9FB867E520B65DCA141AC7868F4C383
BA99FD381FDB2EFA353A63C40255DC35A86C4E011B75F892C13AD6DB63417C3E
037D61C7001E5441DB12B004A3F2C5FB7DF0C9E8127A75907C6A49E412B86FED
64E7B6BBF22184DEC18C56965211E805212E56D00697448523FD75F6620DDEC4
61D7A7E12A2F777A591F289EEB72A9C2C41790E96EACD61ECEB85A5776EDC521
18FECA4C326D284CA9828C4C9ECE984EF925D777BCFBC6E89C10840CC6FBB93E
2607B5FAB308196CE24EF0797AF214AEBC91EECC66DEBAB2A217773C3E46502E
C6664818D635278A6F5D4804DEBF508FD2DD549B704E0C5E7149D1E6334C97FC
BC0805F0F40455C86F11D2525E1FDE3D64FFB5C88D993108EECFF5D00555DF27
F54D665DC04246ED996CB5B26EAF84D8D10CFA64160AE0D42A628E9C53B65BC0
8EE7339AB1295EA27C176BE80B75421A165BB3DD62B01F4761A9DF7E367093DF
89E389F0B66EE9CFA1E00BD0ED8CA7146C98F4CC5284C969B0B5F0B200AF23F3
1DBF7E026CB52A483466186D352FA1C9B5BBAD36804FFD86E429FBA240E8EAE1
B8E4BE12251AD67068B159AD604C46AA8B8D56820CC27EFF698A33A4843554E3
D2702D7442A5542ED5B85FD343E1187DE5CE13929EF92B55E5C02E23FA5A2C60
A0D4042BA1F95E5381179599030AC8290B03855FA20B1684FD101E19CD1ECAFB
930C9270099305F4676AD8EF4C9917B4997352B222BBF960598CEB93EAA6CA03
69F0ED1AB412FA8A773F158BCF097C3081761B84FB8CE62C93394804D764C57F
7D6A159D6F1A7BA785B6DBE74360F2A35AA9CB020293F75914D1609C1DBEA566
1BB37BF015885E44EAAA5C6F2CA4F814001D52F4D11E09D1F0F4B36B38D38D1B
26A6B8466391813B90BF9C227FA983C280F5B02C9CF7C2EA70E19936EAC8F0DE
DA39DA15D8CFA950D8A881F338DC0F2EA89FE0D878AAA2878C7B3A1A75E231E2
46B74491B4781838B5DAF2988405ECC892E52177C196F69D22E8B10E1BB2407D
9D6C8A30E09EF3BD8737D628018E8C5809034545C090670B248BCE574B325664
678F41DF183C282C4ED33D9D0F83AC24CB59A57AC58F2A3EA21AB74FA8F90D03
AE32C8AA343CF5899396AFA4D97BD4D27C155FFD8B944CC86EB74FF1AF08EBFC
0C28E640128757C0F8B938BAC0AA9625D184D3C91FC6FE2D31843D9C13ED5387
26F2BEDA1313F6DBB9A4ED52EAFFA0DB4797BB9700BCF8CF9A00A98CFA3D6324
3B3723E7AD2872060CE72F1316F455895CCEAE76953850302095BE7F70980E8B
ECDDB0D7C3A3E35F65D1B7F754B8CE62A5D1036FEE090802CD5BF9BB412FAE02
46F14CB932F83AAE27ED8E2A618D3AE9DC11F8C73D7303A1908D78C570CE3FFB
FC6CBE09C6573D5C1C6FB1FE94617055C40CF31366748C51B2553DFA11C9FBBC
F72EC7C50D5469481A2ACEF9C653B03BEAFD4BAC3B4DC0DF1A14D09F1374293E
18FDBB8D64BA1C9A5FBBC71FC9FFB4ED512FF30CF8CC507FBFA16E3DC9138944
4B454C35E6279921F86BFBB296682C351FF9A5635B53EFE82E47A180B8FECC49
8F69A1C6FB0694740DB26EBC9F9CAD00F2CC65D84CDD77F3B5A915DFE01507B7
0316765C6F67940DA1F2C384DE1734053CAC6B177410BBE742E852B31D61FE33
D920AA135A21C6DD49CAB7419524FB29A01DF20396263CA8588DE75B4962EA85
42069AF051B194E7913DF1F0E6260B9A830549657E84F9B69FC0DF1852363882
069BB20BE5DCC1D13B4C603E887B3A0836C7499C4255D534E795EF9019F887F9
87A0F91DA3D15EDE178F8E3D52CBCAA0A0AA20C5B437FA0C6E736E9621D1537F
481F03AB565DAFA723903100BA2CE4E6BCAF944AA7E6030952BCF56B41300DF1
D63F369FF69AE3B0119FC48CC24FCD0AC75660004078376C94A04F3DDF8F8FAD
1D9E2888C9BC0909E3DA57C5A874A596AACA2156271A893A0EF16681EA8D172F
4F600D58033766212A233A949F22780B4BF30F60A97CEA8960BD35252BA827B6
C173179F970F3B167FF1A9E1F3D636C6E10E3FFDEA1C99A8DC61427826BFA831
A8C80D240558A184862BC19D873CD3EC7888074CE1D960F3FB82CF2F6E2BA9E1
FEA0A8F5F4136E906A6813F63022548FFBA4D4FE9FE24AD2D43E3CAAC49573F3
E2E16D17F12F7D242B1D2696797BF1E33FDA8B0862004814C2C8135B3DE2D737
412B13DC2ADA0E9C7D1137A28DFC5AEA0CE46C2AC5976540B05B3894088D04A2
A21F7A38C75824C2401ABDDAE56B5544DBE2FC214AD9A64C77B2559439BF6D7C
9E63FF709A48320A379A0EEF2AD643268840C50D696011FDF001826644FE4A9C
9BBA61EF33CB5CD8967FA7DDD32BCE921D0170A8EF85D21EB2BB377AFB70F710
F668C54796389B6685DB11CE63DF71F3B1B5FD30BC9EDE483BF91B14F1F97F23
48133685E85DC4638C0962D92F29819DBB3C38F2533F9E7CCFDDA5670EB7B476
A69F111FA6498ADA833A943AE400F5E5F24EBF821E89A5AD10707CCB10D58319
FE37E0ADBEC61996818EEB0A60DEE72C22CAA60EEDF279883B3B37404798E957
2BA7D1A6DAB4375A4126D0D0B9C7B6044CE7B6ACDF386960AC4F16160531E50E
DD84B213FA6A4E15A2760911B47CE0FA26177C47AD268F2E99DFD907659250A7
8E4D14B78B9AE4D661D9A74A4A808A7C80F5BD793158343A587977A23D0511E7
DF62BB4E038223B7A6E4A6D43C4BE71C0F6578040FF864EA03629F157E8C32E5
148DB6B95BC709057A70DD4A2DEEDB7B4EEB1960A6BB9F8E0D0C84E1AB458304
EAEFF5AE6065CC6AA9F65A4361F4ED5A7EEC10051E76C80EBBD0D6BAFB78B4FF
2EB70319E96E08144760A4C67354274C61174252E1101778B190CF5AC4AC8A6C
D01CF94C675D37E59B75F40CCB1BB339773714E710A6E4F5244E7AA978541BB4
8B0A6081896993EC11E0AFB238FDB749D2DE365DD18D49C821A242856DE9E9E7
65FEDA7CFB85BC187B867FBA9EECB967934FC4F7054D70678B01042DA8B43609
692D34A210A1DDEA6F8658842F76631C3ECE39743F21BEC6F329E34AB5B8E819
8AF9768DD9007DF8A405BC995D16F52ECBB55E1EEA804648770540F478500F9A
EA8B9153A10AC78AEDC203C876AE5A874E3A750F24FDF85EFCD67A6EC7DE445E
713B001FA122BD122ABE276260E03D0A3045AFBF576377A480E513A0AD900303
AABA3425556F224D9446467E143116D6F717AC72D22626CCE08A2464C033EB38
CFB6D75C1C89F460A9C80F2555F92995E236479CDCF2974DE9923A2A3392ED5C
2066B4F56D1A7393337A4800A52DFD63FCC0B2EEBDD057C5B2687259D675691B
17E61DC59B94139FBCB8B6CDEBA868D1B3E3AFE4512BC1BBDAE1CEA4A2F27BCB
5AEB7FFA163D7CEDCF95C7457592CEA93A0EEFA1B351C1618780E7C7D612FB2E
3B5CDF9007D9B82F863FCBEB958F9A9BF755C19EEF97AE16EC6E0A97BA540660
65AD343D1F952C069A25F25B56EDF587AF0A9EB46FA4EBDD13BA3475A20B525D
FC3D6F7ED268FD57F2738377195535BD8F9AAD6C6C0F6C1FEB68D9B66A97FECF
803B26CA029386D1188AC7030FB33217859E313292C118FBF09D03625602CC5A
FDBEACC9963C41A798175878CFD0BF46E15240C62452F12047B221DC38C5DE30
D07FE2651D68345D5F124BA0373326F75DAB6B5239706B378A35376ED8CC6F19
FAB625190CB2331BE1B9577B94A9BC5D2B73C9221D91AD6A69DC1884FB1C8198
8D3C14F198B0578FB7D1494117519D073FE0336396B80B8AC2DB3725CBDCDA44
02A96C076F319F165B017E4A14C9014DA58512870588344D7AF34C431AE46B93
D72EB68921B013B7A3D402FE6241A939BF95A88195AF7932B3F0A4EA9F907F02
48ABA59C25387CF097E97A95A36E0501682E8DC3696FF67A566936B79D6551AD
AF0C9A9CF19731992851AD03A5937E56DC83EEAC7F4F17EBAAAE90D2D342B014
A5A0A4047D62C4F66CD515D5323B7CE2F7A1FF8E1E589E771C128615F147E3F4
FE7611B7245C87802FC9D70BEDB5B04635D43B682FEFDBC5132ED857F9F2386E
D55E9CD3C79B97D2F5EC829B29CB539D860E259C272807FE719AEF7267CB4F46
970DAC6D13EADE62329C234F5C680675C507B900CE9EF5F1AD7AECB4EB658A60
1934552DABF53082116AAE872D4319E9A293A2F84910426D2DECCF1CFA77F90F
C02299CBF639FCC6D2890D11DA066F16583E31ED1BC3F5CE0822DD1E1A6209E8
16CC570DD02FCDCBC896AA65DD41D50D726DA17392C4A745D88597DAF4F5BFFF
BFB477F9A6D417558B494BFF020439DA0E6053E3F2131DDF397BA45EA00162DB
C18A8AF170F34E6A4344B11313B72C65149268CA2B37E897F0A11AE6B19DC593
1E59EC42101DDA3D087F0DF3F051B7CAE04B980E16A79ACA162BC03A79807110
7DC0DD770BAEE3439BE7B94031B7DD991A63CB6EBCB4D379696E73B84BACFCBA
9D69A137D0EF300A5D285261886C5B5EBD88440BFAD60F7C748A63A12FCE571F
914D25CAE2845009F97CB0EE3BF969384310B89F56B35B5B44F3CB6F7500C91B
E6F32F7CF63D0234F3C421F931D7F0F7AC6E1D3EDDA068BCB3BAAF4432AD9B1E
23EEA0B397ACAA5D858D68FC351EB9A99212A520AC54D3D418FD272F5FE86BEB
35A25BCE29A7E7266ED9FE0A4BABBE4C1C260E576211F584F84C0F5FCD752B19
A3A26BF495008F4F8FEBEA3BF3A1DE380C0C1BDF283149BA4728891AB4890E04
CB101FA054A45EBC53B2FA9462A6A60C5E4957F148984A67A33E42BAA8B0A470
6E5FA85E820A44C22E72574432AFBB3A6A2BC58A427525A80EFA791EE7692C55
912DF29B0717A0E9CF6088577B6C29E1E4453B45FE5FE03D29C9610941DBD81C
2E46DF11084EFF2FC9FF908767BE105176C74DA410AF6A5FEE8C06D9CF19B069
C9445A129E6B4C755F4DB59E6CA7596EF0EE2A57E39208E75A3C8A2BAD82E15A
C2BA122EBE0C53E8ABBB869946FDF350F8F8C364C39F20A2F9FA75D82EB365F1
A33A1A1894521766D472EBE6D0611D7D12BF2C7F53F1E9C7D8B981435E623F13
3A7AFD0B57B469A48C8602157B37CD976600ABAE0BABDFE7206BAD01F77BC3EB
63D935C411881876472FB059C6DDBF82A55220158EFCD4C94A13D38591228917
A563C528980B163671FDB1CE3CF726D64933198C8466FB87082E5AF7B666BDB7
F55F5C67E9211A5565213542FE5A12845D90F24175CEF9C9F67E4A45B9596E6B
2FF8CA198253A377C47602E8A670695F7EECF4C31F3F0194805C2088C16A4AF4
484584A364D5E7991196AB37C938407920537DAC00EE2F81A0B636FE81BCC30D
E12BD69E6EEA59FFFAC903BC74571F0C9A3B2622CD0E02D3BD8695B3A3AED8C2
1EF4DD970194E89767B2807F393766B32508C93BF2D8609417312460888B105A
9290C02A9910BF1CC4ABEF3646FE08DDA6805916B3F2DC3E20D472322698056A
A300D6F49C1C61E1F0DCD36E9E1CC2172C27991A45518372264ABE79C260B572
93CCD1F84D580E64A869F7A4497055FD8CF7B48557AB3A23F1EC4958DB38DA34
73B9A6BB5E46B0DF8594A233EBA63E46D79529BA93577FB4F28EBB407BED8252
F57065BAE32804D034748CBBA45B23184C1ECEE86B030FB43F586BEF503D6AEF
70D3669F7A884E9EBDA9F516FFD1ECC0EBC6F48830D4573719CC1FCAD6D38665
F42202C419013CB75B9DDB45164D1C3A02C8AE99AEE8219EFFFB963E86658C9F
D333E1B991C4DA060FD1B0476EAEFE5B6FA173E873A489AE5383116ED6EB2EA4
0D1B050CC980762C87EE0CFCE5E8B7478855D22A58D19A00CDC35DE5960ABF53
AF7EC598FDD08EB6AA4CAC8BE6AD7C050F84FD141FD68DF623D357BDD4C07433
3DB7A03DD3A51599ADC4814405B05467991D1535373B02ADEBE5F14FF089AC97
D6B8A99C8F1A42C0B2830DDFAECE2719BFC8B1EF3BBD0B4AB722F02F810022B7
3358C207EC464ACE4D7FF8E7D309BE392CF0D88FFD998228455D91D51E137AAE
5ED4B2A3E33B851F2E18AE8CBDBB828351D460875CB5A5610E68A9A85497FCE1
40B802EB94102CFBFA860BEDBD70918B803635AAA8ED2239362EB186CA0BD68D
C9F314FEA9FB8EE9260A7E944FDC219E2DB33027F96B3A3C744254A989685550
1E055B95F9C25CEFA0FE827C9A555727C2313E5A804548A9ED1BA78842154CB8
9E76EC19BDDB183BEDC8281C6E62AFCE9CD5089E55AEFDDEBB6F1A967893AB82
1DD406F0BB3B9E6A6F5F4D67C9B647A0799D6D74755C4B9A96D46F858DD1AB80
0BCB8CE0960F30CAAEA8063C0F377EEE2A1F114423EB71DDF083E683B65F7210
20D3D849249619C1E2351BC6BA3C4A629A0FD36D68CEEFADBE897BB141985711
52E8C9730EBAC45DBC3104B098FFEA40F7875F14215F43AE2EBB4551198900F8
8A7536B254E66A5C2B482AE5F946B090D0DCB94BFBE34BFDC5BC29F9CC5582F5
740C92AA4D3E6BB119A6A417109BFC262AA204BCA259D7E5D7DBE738084795BA
932A05648CC915E5A81A0F2C6B49C986AB65F5F4B061C26A74224FBF3D9648BC
34EC2D390642716998D125C1538684CC1B948CEDC3376B8D8CE80538C2FDD9A7
F323A26AC427FA9FF21CD064B83452A7E38FFA829DBE4F1B09896D0B6BC5BA96
B8145A8B2C6B93E00B529022FE36D2E0E3557B8173AB0CD35BF40915D94E5831
51BF589FF35F151723ED7A86A0F1501D71BC2D3B8A8997AE3C2FB3894A932A41
211A6FC2DCE3F3AE9518386717515F80B71138D39188BCAA3EA6FD15004A123C
D1192D4898D15A5FA943A3E354843C8476AF68FFDB416935BF877E5B1FF1F4E3
71812681AAFF2D5F286A2B7279B16E290EFD449127F54FA3386CF12A1FA67BD1
2BEF25DB69BF6D66A7C662A9392A56DA20668AA10487D9A29DD97BBFC2C13AAB
0BFDBBD236017BCFB8BCE87ADD4E449545D825E5CA0588D7EC98E1F997B9B41E
98DD457998A2C82E090256A5F1F9C0DEAC6FE2CAA09FB5CC37910B427A11A74F
9B7736A819EDDDA5433D14BF3135E18D62D419CFD780D73E2264D7E8AF048E41
A4027D6FCC6F75769FBAA72F074635FC32D3333FC809DF770F419FD7A550DC96
FE86E15E6DD16BB003BE9C6F8D4336423A717107C0059905FB76DFDBACE2883F
7051933FEA7C9F08BAB2D83D503E59964E5BACBFE748D12673C4FE2CDC892E8C
D63066C2CBC6E007F173011DECEE7F2CF2BE8D86DC4DCE50AA9DF57E5B7148B9
E2456C75B3B189120BEE73216935CEC33B1EFE969C35CEE6CD3A09A1E0F4E76D
76340E28D30F31E65CCDC5776187548D49555A2E91B5C0EFD0B6CABEE5F41DE4
D8FA53C41CCA6DC1B47E869C458D7BAB994ECCE9486795A82AA6908EA4A10AB0
B29F6607B2839CE50869255AC64CAD2A57AABF55239AA45110761CA0CFF167B7
6FE902AFCE76350820D7E4768D260B87951D41D7E0070BDF56873CCEA99A5E93
AF98493BA226B0AC6A0FD398D3D4BBE974E99DC8A7E7ADC5B47F6DD0538D4C7B
1D66548004FA1349B1577A5EF69281A72D0FDD5398E9C0225025FCAE3749CD2C
8616AE98A212E6EC9417FBF3DC1ED08139941DAF1A5FC802928483A256DC7D07
8B2360BB033CEDD5F51A206B843793E3D6ECF358942309669F1C6AA5F8805D6E
F2849FB1A2E11A5E6CDCC6A8A956BF06F1796D6773D2083F79B6B1AFD2A4B11D
BA9C40844699AEB07680A3330027BB5F3B6883CBF5E7EF3BE7A5F84621F50D51
796D9B9957CC76D45E7E0825217E405D8DFA46EAE6ABE8C4BC5875B33C0B1B12
B1ADE4B1629DB9CA7A5EFA241B23F7728E6EC03F8B389C018DFCBB584C84813E
DF59037DB46313C1379D2A16C6B130C88A06A8B97C1DB70EFE41747CE04C50F0
89EECEF3825E31E98E589AC691C80EFF8B1C6DE3133F1404CDF45A8175492B33
334793A7236E579E4CAB04E9149137D4ECD4C9E25E70A0E0A0070856058037B3
D8EBA76F2D7FF805E4E856B18F14EB9EE297CA495E455FA1CCD22B3FDB3ADC72
DAC505E9EC3AEAB8641EBA88E1F48D16DE68CD1AFDDD13B71082B6EC1060C67D
7A9BFC85336BF0A8644A403BB82B153A4D33A4A36484744CFEB88B89091476D7
F7CB6111417909B7366E270ED5D853907C09D736B047905527BEFFB6D0066060
844F55833F1E2C586E43027D231659981CF86385C23A2CD5B9765355FF4DE719
15E92FB01B6A5F8ADB041AF4D3A799D158533917AD6990F41F45299761CE03B1
07B00EF054701F39BC666155542CEE5C1AB7189D6F5C57DF7689AF274B78FF25
2EEFE16B3EE2FCB28304F33B5E2C847196315E78D22EBA01DA5E7E57C06EB21D
4C5CA22C382911BEADD55B625B75DE91826D7BF0B401C6F9EF0DACCD7B1435BB
1246CCF238F302C68C4B8F014DE210A09A64B861323DB9E3554DE67A4925D36F
9822732941A5198254FE5D3BEDFCFF34ACBF9C6E1473E5E1D11A043A1553D0D5
A9A80799C287A7283C5E8F395959D38A86B967C913EE7F847F2AD37A3F6007DE
656B64FD460B1F7C75C7AE11FB3B8E6E028DD8F3423C58761FBE9623284AFA3E
5843004E4952DB27572F64B3BFE640519A154F1B271F796AC360E7DEC43E81B7
E5F66D6AC5427CF3560D7706CA4AD60FBD1B67C8B0CECF4B4F580029343FDE84
C05DC7905ADD6104A33BA935CCA30ED45A42AB73B55B93FFC9D0EB633F5F152F
E7E2BB79B7696FE2C3680B9CB51B17B41E8CFC54F47BB5CF364A6EB918D2DD50
D00A97B87A4C3E9E0972BA446C0ADEB9CB0F2284231168DC1BFFAD46B1C15373
D2643C4063D78C5143EF443AD4750D0F6FD7F70DDEBDD8B368487CFADBAF1D28
3BCDFC39615B6E085DF5F4D448D38DEF64BA78BCCDB1F1B6BA9CAD1D60E53D34
A7A016F719D1BB30ADB2140F874B102080718C304F13E2387262D6C22C7ACF56
72CC94CBDCAEB88298C276126F18CD442B1C69BD2D09E48BC42A7D95A61B5907
C99542A5739B0660E6CADE5984EC936F22E22946C2A73028469865AFF54DD14E
3B40CDD997B7317E74F7B8E94AEF9EA937EDD23133020969E331BC9250C88908
86A0BC29448D174E6C72E5AE9FCD9FAF707ACDD461542D31A358B6B3E7EF1515
7FB45110B1E9718BDCF743FD3A544F9F854FA33ADCE430394F8AF432C82A4A94
55633BF88F637D8628F028DC4E2B94EEA80861388EAE357001C4ED492FFC5EE6
85A7289D168EB3B313B03703D4654339C8C1D753C266713E5460A824F961C650
AE53F7BBF1B2931CE66E05ACBCA968835FF0C647637D08066F0B7DF796C1BEC3
8D090D3503D422D45A953E7E4347855E9FFBADE5E9F04E1CD2BBF07FE3972AC9
7D149FD06C9CC241333966ADDFC1526ACDCBCBF4409804D6B03D4CF336DAD1BC
297315EA8F48D5D2B69E8510AE2FEBABF2FBAB17381313F4EB21C31E1E07F79D
F91923ACC445829D552E5287AB4DD27EF91FFB64DFCC145E789912FC41C47297
C39B0946017BBFB9D5371374E8E9CA4C62EDBD6BAF900751D34C1CB5D99870F6
F407E09351E37F2BFF48022ECB08494D52C7F6E0567A3B56A774F7E73140FF95
38CD996B03A436CB06F05D1AC24A8D4E997A1FE5B103C2368A4908BFE78A257E
97A14969834F783B1CF9C08304ED506D9CA116873559E626BE07978E123CA5E3
D5E97153EC60E9BF85E7A0D504B1C28EB21D1A8B0EFE3BB56CB23EADEE221671
8FD335690DC0145FB7E4BB74DA6BBFB4E686B2232DFE76F523045AD4A36B427B
226D6F23941B45F8E864C22FF070F95F0EF83BC17FCF26D1BCE057E5159744B0
390864F9428441C6457B3F0B235F66E8AF88B737B6196624248EA8F3BED09B32
482C8AA30CB6F92D42F3D8EF0D4475BE6CCDB580BB1731E95DC7A576778649FF
CE98FE83B1F126269F2EBED2F8A9A7CE7C1D1BDDA6019492886C9EEC5331812F
D4DDFF1ADC241B50A691D2654E02AF6E9FEB35872FA68F722AEDDE35B3E2404B
95D616531B5214A13C1A52AA7462C6A0B5EEF5CF1BF24DA55565436450977011
F08ACD6B0DA8EC39471B4659092DD8E3427D78989D429450EDA15DB13FF94305
C50EAC9C1BB533AAE49EB602D95B7176558D0A80B6447EDAE4EF14F9E60E48F5
A6D3D6062817CABCCEFE91EF7D38606D8C1BD290ACB2C1E06FA5625C9ABD7A1D
BE4655520EBF91F6D90C6F8FCD0F025C75436E9C70B6395B87F1B62A76E4795D
6F7C68C812717AAFE497673111141DC2417355E7CBC5395DB2945F5F675C6838
BA0B5F3EC96070095FE345FCFB3B95B3A26D3BC456DC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD262BE3D172E2F03F564F1325C9F1E050C83C12E0CE3
C7F58270B5C40B46B3F592FB41FFB7F59EBD69B2F489441E398FEF7F84C85055
531D95FD21629B0E509C2FCEE995D025BAD5D3F28CDBA5CD414405ACBD936C3F
AA4CB2620D7426002161F983AE95E542EB8553AFF7E57B82E05FDD5FC433E1DB
BBCFFB1ED92299DB0291CAB10A84529B7FE279C62628A24A2FC36B01976E13A9
C528A198B8EC8654AD69CCB5C209964A2B25D6DA9BA0FFB366D19D8C69701D7E
8ECBEA88569601C80E19A4165AC73F32D0ED08C8FD0D0407325DFF60D69BC8FB
95D27536CFD07285E9FA0E957BD98B45C2E7A24AA33635C6683B801BC89AF92B
57BDBD4C4FA2979D6344AC3198440DB1709FAF1D9DBD7EF56D61671DDFB7DF73
DB0EB696F249DC19A9E0E7E4F6A6F5641A378DB534C6F23CF4F34A9CED04B6B2
DE8E100126D485B41988BB72081D528AF5650261ECB4F6C8394D7C454EAABACF
09E4FDF48F25E3CCD89C985C9FA4F2805D8F1F33F7DD51D179FF77D8B0B85374
CA402EC6C52FA054A7A01C4C0AB6FDCE098EB6D12D3163C9F3B77C979252DED2
439D6A3C70D6A3A2DC97B437FE88B4C07EB2754C7550B65099353F439F862945
E9F36FE424BFA400C6EC78FDD926CEAA9AF04B53064CF54F2A897C497E933287
68C5FB1666FBD7D8BCBD6581BCC9ED7D9356ABFFF098959ACF796FE0B579DC76
DEE0127F620DEEA33357CA28745F824F3B4291DEC1F47A4CDC5BC9E12FEC50E6
67D12675BED632FD99EAFD095FDF9E87A5C009D1813470D7AB83111D1CBE1F8E
AF96A1FB40627F0EDF8099E95125B8AA6FD58C023F874DD09E7075498B48FB7F
783C08960855DC9A70014620F260BC0C86DB9E42F0EFE719E84394EDD40BB838
DA65CE82AEC65FA92197DDE7A571AFFCE344C97C8E1E43570A2DCABC307A8506
01DD835F0F981B07EE3E29648CC83C058518ACF7157608918C34D2A24CCE2C6A
EA49476A108451B250F35EB8393077F1AB8284E322237EBB3D31A430B2FF167F
C6DCA341882E4465195E756A1311918704F545FBC032FB46C1D2A448E65F7CCC
104CDA7CCD7D7B851D7E001B4EA5242962F651C91C0F95C77D80A6B169582D73
E264D7FAE800316BBDA6906818BF83566ECACEBE06F8895661871385EC95EFDA
FE3F4E6063301E5F59D0BA242F5F02F147428A3C948CC502E48D3A2A977F94E8
D5B62FEC55E345DC02878514BB40398A77AF5C51E6133439429A81B115474B6F
0C1EB0C2D05B8A0FA1CCE92153D98C618EC6FB977F9ABD087EE0C2C6C037046A
06756D272A2F4D5FDC66FCBF09B075FFE376CB76EB0366E5BE34175F38CB5644
15770BD60EDD52EC66852D66255D2A28B022F7809917DB6107EC813C33DB2EC4
5D02D642300ABC34178B998DF606DA286270D861C5411F1F24E9ECE42B0A1B7F
80D62669A491AC8853947BB3F9D9C4B9FB084CCF76849CBDB2E7354E5095CC65
F3F32299D4D409FE2817984D5F29697AC026ADBB4F51995EBE6554B56FE35C30
44D1BF967406CB495CE1DAA5C9514CFBC6AD39AE7AA404E5B6C577C2DBB90A22
47D8F46D0A776E288BEED701BBE0B1415853F567FD8154DE4E9EE13BD5E4EB2B
F64D59C10214D9133E780432507B8C603236126D3EFD6AD775D87935510FBD95
BCFC87DC73FFE877083E578C9A063D63FC7F586CB26830D6A2295E334F1F1217
F86A2CAD6BAD009EDAAD41CEED98E07F92DD186580D758073D97E2CE5FC09493
154B952385A2009F7E776576E75A07D4109C529148499AA753C54536D6880DA4
1CF2792B473FE111AECF6B6BBDDD8DC4A4B29ED7E3D6065BBF621878CE795BE4
8428087635F9288CF95830D20FD1358CBB610B83059136816BD13EC4A1207485
CD5AD4E62C7E08B075CF37AEAAA1F0E2EB7567DA1190D19591204426C332DDAE
338DEFA7E33DE8AEC6F8A2D6D04A135331A7AC6E223875BC046E8CB4DFCAA0CB
686F674DE479111B9F7F207F8D7DD05FAB5F80217CDF2AF20AFE3CB7E6A67753
3B642CFA4FF786B0F7A2D2AEA6A3037AD61A0419EE21918235045C5B38D868CE
1AE6340946D2F61B26F67A260A4183CF38360F4EF36A2A66121877EEE45FCBCC
37E12864D73AE2A49CFE8F664BB2E5D0728A580CE0509C6A3A5DA2F59E875FB7
CB788A9FF13253BFD5898497570E8C9A232815E1BBC19B8F2047BC675E834708
735C3F25CAB79CD74ADC3FBBC7ED2E6A6E1B40260FCEB39B9B376F19C8E54883
33350B4CB199D43BADFD42E27F4DB87ADD94384DFF2D277E96AE68B44DA80E28
37D19ED66869D2D1563EA35A92B991879933A3E468AA26CCDB7C64FCB86B09B4
334B643A0DBAA9DC2F6628F614263A4FA545C38C93AF1682FDC414055FED0757
64358C855FB99F94DF63121C295A1DA9EBD4EDE032EEEFAC410F391FF49B96BF
177C80C2B3A7D92B6F1DE1C464BE05A8C46ADF997DA3A0816CC3421107125727
0A6DC62C59575E5412F0FDD252FC885C2B52999ADCF9C238766F5324F868F3A9
CF511BAADF5375E40CE0FF0244B75A45D4BFCF9161FCCB4DE1362DAD2581F5AD
9944D7D65DF0714AAED1C12DF5CA6270FD7E819B0ECFFF5D5FFD07A7DBB7A005
6E6ED35F6EC0A0A9837FA890156FDEF2FB4928D7B0C219C0D7B356342A62F7C0
B261A531FF34ECD2494BE0F0F99A7F6005609304F8572F28CE00C32209654618
8F406A26345CC49E8918BCF52C285D62736D0A5E28D8C7610DEEC9A90425C9ED
27DBEBF1F017116F83E4C7B10F5B31CD421DC2694431D7E8DD61D8FCCD45BB04
6E3DC7EC8E01025604CE9D8D6177EA799FD7F5B27105D7A774B90D79D7FC3377
33E950C88E9CAD52BA2B77028BE3FDB97B821801D55698E3D6EC5FF36F4366E4
A4EE644DE0A1D7EF665D54B71A02AB8F61556E9D4400C73636D49CD5DD05C26E
4FF06C58CC113D678E728C520B6A125FD4D6FDF50C698C80A0A070DBBA91B7B5
C7231C5D88D87C268F8370F4DBDCA092B9D76F155D78E6F3340F3520FD886DE8
AEE6D523F1303EE2D08AF5F83399B09BF216EFEFE6F59BC13D5938AC2E43CA62
E9E70C54D3D9EF7FA7CA36ABF8957F2940A99ADCF452BA9B87C99BF2DB3AF2C5
D57DF51E899FFC4224348B9E719C7C426B177ADE267F6A5F889CB8683E464689
4D8D2B1108B453A25613374B68132A3057D4B8D6311E104F56A48DEADD2BE1E7
D6A6E0029D4C0B8E801B58174ECA126BD037B112C70C3D83D3D86C12D87B6EE6
290CCC604F858154CA1659DC02E48F4D809287E2091A472FD24C90C39081A435
B219A370611758124E40FEE39C478680E7DF507201571CBAF020993C18F1488C
026A6B7363474A56704438E679672B0E4592EB37B5B9678729BEF70AD1902D1B
F8F7D8B1CFD06C38941653F27E1038EA1469E325A1B154EE1F3E90335BCCA3E9
2E8A16B713BBBDBA92549B92FD41EC8BCE9A1A7ADB7E08557EAC03F76C6AFE11
FA23955C3F993BD969FF4F28E909C104F39E139EC3DBCB8382E0A6F81E141125
716193B375CC3178F13B8CBF5AA529150802E3A26507E9128F355347B1BE3B91
DE5A98E701A3393F8816CF7143635484EF6558B0776A31F260EB79FA98C2305D
DA89CA5134AA613BCC82F17236086E64D8BA45543BCD0EE9DF5C941020983123
1D6364F17E210A645BA4A27D7A01D8D45D973331A8FF6A0841DDE0FF2DC92E6B
DF8E4F95D836A8EB63FADA17B3227F3F921732E6D1C80713375FC836A30B3E94
F74DC1E9B5BDF57E0C962D6611D79CEDBA8BEEFE96326EBCD02A565739D7F8FF
8EFA691CE46F544C9304D52BB4A308883836DE84FEEC53B5508A7670E6A25C33
B43FB4A78A8E530BD202D94EAE356905472ECAF39ADC25C84A7E595D37E80BCB
57497A48B30ABF60BF7345A0DB247E705FB4A201D758A5BFB962A78FB2062654
413E13E0F61C3C8AD85221D5F92139BD4B3EB658D88C5B70EE1A98CC04F24E86
C631F285990D9AC2B49A719787D2D46385B6A4C671EBC45B3421F89DF3CF7A71
DD8B8E0E32397B51ADB338177EE1A6F46441ABE9010014ECF01FB47BF0EE64D4
DA4191E45C443653C4D804BD54397BF0E0EAEC94CECB98AF824B2160C65D4920
8928B62922658A9F97AFEE03E05BCFB7102C6488045978421FA3A53BC7F4829F
741D74136F0A04A5CEB9AF99F90C9D238EE730AC5F8A655E36B74E65606DC942
0C96129994B7E65E2E02E6ABE4E3A196B1DCC6AE554B90412F47DDCF95EEF3B1
BEE4E6CCD1C2CF3C77C514D1F6643D9BB091C9C3CC511AF99E24CC9EDEAFCC19
6D3D233FDA8022FDCB25FEEBFB1BE647DDBE8EAA7EDE02AF23C4B51F04E3F3D1
086C10723F0536A0E674C8EEC64EA47C053D231BE55CF0396EB94BC26AA533ED
C420A9E88E4D1240CC68A2DF1236ED86FFC309873BA562F8929E2496EAB947F6
82C7C1745386D7293198C9A308373590E701AB485638B7A5D3B1F5CDEC7EB575
A5FA2B3CF9F6571676A093435A480892A170B1FF6381282A6C8478C496CEFC8E
37D179CCF7253D1199D292AFEA6372A51769C6283E7A0146B065682D3BE8B156
1650B6F11FD1534B498BC4B3C2AF274A4A493013FBBBF41341443323BDEC145F
35973198687F9C1B4D401951A57DB56733B8C0CDA22AACE18D4F3A959B7BDF33
365CCC7D9F7745512B26F868CC7288C95DE9F580278D0B75268484652F67E43B
23FECA3681A36DEA2016F9F992A123CFACEE5D4E842D45FD446D21614D6A1BB2
C80B53073EA50CB6E659EE2C6B8379D1B20DB4A0AD50081B290E073B8A067DE3
9A94C9ADCA8102208BFB0262369E228B8F5DE84626C226B868F92F44821FFAE3
E4E564B0DD9BFE8C71667F9DB37ECD0B3D3BEA11DFC81269DA1945D4AF8B653C
A351CD9825D53554837000201D6AE8C529649523698C26A2046B603D1DA0A6E8
21A69ADD7ACE5689DB8290168ED1BA371FD181710DC6D6D71677D25C8C9EF458
21B6D8BDF29EB4B68D8D9E8B6A2DF638D19A7AB20A4035DD9DC8F267A9968094
F7889FC19FA3275A4FE3CEF36F00D110073C2D5844CE4F59788B07CFFB686EA6
00EFAFF30F638596466DC6CB159DCC931F6E66C273433B70224D68C073CDF19C
AFA6272DCBBBB163D7B8468410D42E9D0C2766A0818A82438F35ADD1DD7750B5
18221286412D95CE267730FD5B0917D800A53A0CB71BF2F330ECAB3C865A5E7F
C7A961089BAE6ED335F07A5C409A3F6AE1F169790FD781C873B4B58E0EBA1BE3
60E377DDDE87A33C01CD443B01C1ED1C9C24FEA5C2C91AB085AAC12011987127
B077D6865BD6132EE542ADE0A8363397B858D06347D84DBEC6902801FE10B3C0
FFCB8BE5DC3F8EFA5C2F66676402788C836208856A68C8C4869DAC55116BD950
76DE429E390AE607F379042BE9E8414F542BC943AC95B26A5C84DFB1F36DD4DA
4F689BEFD6B76B0EE91AA2B3560160FA1A05E0671AB614DCF5DC71D2F763B382
84270B6E8362C55F1FC1CC0D75BE3101E01B8E411890C4C0271657B4A5CBE540
7C2F14966747AF63BFACA46D1B1C99363F91A91C086F391E431BF34790ECF3BA
399B737FB3DF50CA4A56E74037A65A4264FB9DF3DC7C70DB8976884ACC1C8D34
D74E2A0606CAFA5666E7BF060E1F0DB258C58F6E8936BB2526706826720990EF
3C4FDE15BC115F26230F6349873CCD185BF27B130F4A9105CD95933BE02257C7
DC4009AEAD795D7162C32AAC5933293E951398BB3A9784A0B29B475D3AF36749
6E34182391EAD1E6BD4191D1A4211344B505601CFC4AECCDBAC99B1D7A911FD0
6CB14BADA989B22EDF4C52FC08AA75A0F2AF57BE7395836D19EA2F7CB8C6C5B0
A6E17E2625ABE149160B4F1BCB99CEFFDED738AD9CDBC483928797CEC1036305
DFA71EA91C71BE317161550B8BEA8AE389D51D810156131291802039D51979DC
177202C511CF5360FC534C4CF66DD9C32419A9C72A278C045B1D9FED4306965F
03F498FC0A537B50E9AB94A139C482EF090C5C6E0CF4AF9DFA1132EF6C3698AA
CD12515F4A49687602062555113F5880E4936D040F25C42EA0061E4B6E5A2953
B40563F03383B7EB49DCAE97E66F2E034C4879D7386E85763B70BB5DB6C31B09
4E072B3432C6EB1394A3401682440D5F070B3557721CC4CBDCE4A2BC9437C68C
E7E59BC2F32A022A12FD775A8FF5F46687CE16FA28E57AB852446CF4CEA57D02
52AC03E7F622D72134B564D93E6B3F185CC8D3CA28515F6D928236D1150F2E48
8C0E2F846F912856D42C8B3806FA0618CDB8D1535B956E91FB3D5D0759A228A8
E67F47F0F1BDC891EB6C58EA93CCBC1604556739E532243A09F73744603A5D06
69AC66DB59203777D5DA6676F7181DA68472415813E3A8EC4C265B2DE57ABA04
96945991A8FB5F559EC4EA35CAC62A96A791F0CD3C2BDBDAD7F0BCFFDD375995
56107554F8A70E3384D3EF72DA2C7AD323F29113A341065A02A726A1AB7E4EAB
201FE758F982C54069579B6C72D8477513E58ACB10A20371AD3130CEC7F8AE6D
5C347210DA2E28EAE9BCDBA9AF2ADBF517F5C0C712E3470B4B433388954CC9E6
9C95A1FA0751ABD63A4015318BAB61AA275A7CD518EBA5E383B8CAB85B008523
5A086356DDA87259D8E045963E34811BC3B9EADA822705DCA5D883139B77D451
4ED0C5D577E1F709FD2A4F6E90FB87D71EE786E23A3D1F97335EE8EFD7BA27E8
BE2076865FEDD883715B381E6A7ABC554C5A9F7C734B61DEBFAA7B236D88CC4B
D4DC84B554EDDC337A27CD1477B99E602DF65E2C6C849FD9998796192C45D99E
B7D5ABFED88F64A68F3792E48AD3C84086DF605001AC7D0C3C3E7BB627258472
F46DA49E93A04AB021B7CAD1E18D8D0961E71F186C1BBD256C0F6D7C111DE70E
CB85D5AC9A8D9507AD1B9D94C75DFED391ED8C0DCF81276C86D387D265D7857D
7273E254589C72A68B000CDD6EF080455BA43E4D3EE8384DFBAF2A16BD9A364A
9301C8453B3E3BADCCB6C3C0064B692362866B6252D770683BE109439C17B14B
810171A274781456BAEE27460A3C68558B1C1505276EA0A9CDE765E680EFF521
C02AF9B270BBE78D05C6A2D5174EB6C3AC504735E546823C2BB61326C6C33847
7A825A4FD56C800FCF78B89CF2909B9DD752308478D4F53289351737AFCCAD0B
E408F77BA02B4869A032A318C6E7443AF6A07914A0C99A8C0030B07CD83DC577
7F46535D3B7680F3675EA9A015EE84BDC9D3B93CE47139FE3AF45F5E7D9EFDF7
F26BBDE7BD244946DD902252AF60C6A133E3408BDC8BE99B767E8B8C35AAAA07
0DEC180AF57FD4129780814E174D6940C4A95AA66BE989C1A61FC04E9AF34743
6F55198484A25F559B34A939B140255C672303C7FB9CA0EB80A3C97CE45075A9
C0ADF44F3E21FAED2F00598F2A917B3C389115EA3F091920A5A16C19591BC9B7
6BC29C0A2E6D79B454CBCBE4058DE3AE16D132D4AEB01844FCCA03E0B8AC7620
3AC4C96DDF10AB25209A98AC4E4375CE4C08475AFB3E8B2400BC2CF72F9F718A
F444594B44A5B4960D3C22ABE4912F8840F8D2AEC813195A88411B1FC766A636
E8FD8C80D606C2269EBBD6BD69B9D5933B04960874D8EBCCD0786A6B22D03791
D6E93AF675530F056488293225548A89D6916FCABC95D5F3ED137B6A0C57C0DE
96459B6791D783B6265004DCC9651C57348DC23E3498D51FF0C22E348ED4E599
39B57CD6D926518484CDA9C12A4673B9FF77D863A206BB5A977A0B37B5F1BC38
1A59706BB0B83418931C8E2D750392EB3E16E5BF7B1F53C323DEF03017B819BA
14D588E591E04FA1E7690CDB291AFC67B665ED0221D08487B8AE06C251A0E44A
8B0E87D3E66E5CBF3318540A5FC6DA39B028DCCC7C347E86CA6D9BF9A6037E3C
CB9A6A5B16474E30DA57F2AD172964DC139240256B19BAF4E069D915028825E3
526AFD58333B551DA332BFA2B1B7967DD8E09E51BE5FE983EF4FBE735A576652
C58FAA4789144F8277A187C8FA1B014217F0CA4ED48E65566582928DD67F305B
902F2D2D4A8F566DF3A1544F3A87395D1F0A4F7412A6EAD3D1F700D6285D7AA2
864F9C44A545F11DD4FAF661E9BA7DB2E0765FB7FF1E630CE609D5597719CCCA
0AE59ABDB1ED26D94741348B4D5655A8510E58CAA7D129FFE8C10CFDDEDB2400
E2985D3F8D4A1C3E964CAA47AA1DB05117D8E4206AC6DCE4C8328F310DF624D7
7C7B1CBF92B4ED5F2D138D8F8C7F80A9CB24D7C609CB933E4D8A652FF2EC35E8
BC75AEDBC6D5B6A5259175CE1FB24349B37D1456269178AA2193AE5F4F24C66F
42E89BBEF77F5EF10EFA92C8014D61788E09E81804E24DA9580DF74B2719B7DD
018C277B6A87280EF6FADC3EB8B29FE9AC432A8B93991D675AD42E854E43D76C
DB3623704D879D17232B3972DF03DDB16C1D3FE2E0B49553B3962A4B407107CB
B904EE188CA7F7A95BDA17A2EEE146E4E1C3098836D298AEA4F302F7D56F50AD
4C6873CB2DAA4CB6EF37EE5EAF3CF48D694D3F8A6F7533FCF83F593B7628DDC5
4CEA82D7187652DC842053DF9C575D46209A958C976E844064620CD81891447A
DD56FB17546B067480594164EB231B9A91738C3A87CC4F2B33B41366077CD3BB
FB831A858FF89B4456307816A6841BA4C6BBB472403B672F477AB1957BBF730C
45B7DEF160F4B2DA3A75FFECBBCA2203B15C2188DAFDF18015AC090E4B548277
D09067A77CA78AB6E5EDC5C040515048D0EE9A00F28708F7C7FFE1E11F01BE6C
17AF997BE270920D679A42CFFDBCEE99C0BB062B7E5F507CEDDF278CE05D4839
5D4EA560888420E000689A80837B8FF93B3154AADC931D835B670FAD48A2DD76
7347F63904D75A2C285CE0AEEB1F37D76127F382B1D6CF8688F4F943FCDDD9CD
76C9E4D8D1A82A05AE681EF0D44763E4F32D58C4074B8E9ACF9133FCA7A2A663
68B532750EC474DA5BD4779AF4CCD0D7F343DB63AF367B03E52B52EB78B2AD17
E8D3DD4C144BE29264D26A36F30C87B4EAD2AFA723D716585241C0938C700C03
DB0151562D22E38A14EA468F25CB9D5F59E0244C002427094B22420FA88786B3
8B78EFFEA523E7AA16728C7FD02300473413F9F325C8DC0A3B43AE3D06128495
431AB1F3F2C1F8FB8DC9B933956A89BF20256EF86F5889DA7809B94688583C63
E7223BE78DE04F2572A2A174A0244A89252AED943077208D4C8E6445D9A8429D
DBA4A742B4993D2C68933D6325FE3E5646EE213CB9D3BDA6B615FC68A0E07FA2
C311A7ACB9387EE927A8DF7237594ECF9461281F48FAAD6A80DCAA9828A08306
A4DBA7134F3AE977B5EDEF199DE99B96325DF307F96D1152EFF79A5E498E32A7
A10D342954FF1B0FACD939174B78CAD3DB2C6D338AC0240E69C218638CAA7D00
5304F4C583837746224AE3F77A0AFD665BC685BA0A80D9AE9169810FD1A4558E
941245BE97FB3F3AF1FC964CDAE4E978E56FECE1DDF23618D9EDBBF3EAAFB2B0
63F5490FF79AC9C620FB08E95E6FE349EC8FA6CCEA6539C7F3A020F77038F6C5
D81DBE8586A6E19AEC4D3C5F2A3F053BE30E7B00F88EC1F053019E12AD2C0648
1209CA5F57F085E0B2E31A7761110E8CFCEF39F94D7BB7122559FE8C0DF1DD8E
4E853DC14300FFA4523C25619D1392FC329F7CCF2E568E3312E23CE00B51AAAD
705E36C5DB7A1CB4EA7C2442474E96F10B9C53CED9049A1F12ECD733EEA01926
F71706EBD4884EE732967BBEB6E2ED86658DC96EF1365A8384E9913956F6876F
832D5832A44DE306CC081B02F23171E6FADE157C55B841E53C450DBCA1E35B4C
99704BB161D02AC848AE0C8F53A2806120C5D77D97D21235CF9973612523538A
B433C09F6488FB8536FF600CB185F08C158D62CBDB5ED2526C14D1834E0155D3
99DF1A218B7C34C716F0C3C37B0E7B3430F014BD1F26A30FB66407D85BE6F606
4B4931846007E10B0D8E9590B953EF0FCDD25C76B505DAE6D05695893FE740AF
F867F85B26044A9048A1BC47AE0D9AA2ACABCD802C8D9822DCE249DB493A8A3F
C67D9F369B5336F5F8CA65A665CC4B337649A4964E107C7B234DB410C8F7B048
B938B74D9BA97C701E44AEE511538DE56E526AE547A5FFB006D26715FD00F080
D2DC97F0A583E8D02B722992F9143C29890A8CD97E87B14FA3A45755F4504F6D
4B40A5D91F70C0489F5C73A0C3706A1E18025139EF12BD1AAA21967951F5A40F
8DA78799FC1DF4A6FD6F8F1E8B8B6D5BFDCC92DBC9FB518D473D34056D5D79BC
3A7D3FEAC99ECEA98AB265DDDC97884279C81970F4E313B601D1B2EA3462373E
2A66B54CFE8CA887A39333E6B1BD6276F7691920A00BF87A0171ACDA6221640E
A6B3DAE0BDD131E6825CE94BF660A84237594B4F7456F4F78817653708B91906
9129E45088412EC6EE4909916D6C4777CBAF068B479A995AD5A70717C38B23D7
CA54034E06D647177E2D632DA7B76B924145972CDA1D94C2F7E29C696C63B690
754B6F13CF438B528152658F18BF67467A224E76966D228D54991A62F9774431
1E119FCDCDC746D116C6299226AA239252AAB9757FE3CFCD8B5A3BBBA4DFB1F8
BDF6AE7AC2CA9CA769D3C15DD46F8EEA4DEFD6D4609B380E9FEEB88143E67352
5F0D713B5F198AF36BB6A357DFDBE68B1BEDF810DE8BFE24890DF861CABF5EF6
72CD54662DF4689DB42F768628ED4A0C28E84157D16E9541442EB18CFA942EF7
70E02343F42C7AE2C95AB89D2B2FA3FEE2C3163EAB02B5615AADC1ECEEC1E912
C3D4CACE8CBEFC07A37CC1078831FDF16D018DED052AE29A1352721624D57145
717712D5C2FB540A36FF651C54567BD1EF032AB42543CBD757746F0F287E1775
615C983D18B1188CBD8D83670F964E7FF039FA855CD5ECAABC3509108B61ED33
B12FC51154926C0467EE83E1EF5DC01DBD6B1F63616C343D6696BEFEF767B843
D56D7781E031CF26477914CDB1AB9670943DB1BA6F26F0550829507674EAC779
D8B884F1E695BADD2F6D6C6F766C6221887000FB79F392BEE0764DFFF4107DAD
C664F30451CC3A640BD863707ABCA0A69E6CF6869A07DC9356CD6D6E32F7CBD3
EE9B7B7F67F15F28ABA1AAE8ABB2C3E845B635245A524FBCA01EDB8D693CF943
3E2F1CE2C3A8CA28FE6C16251E69BA5F423D892348D5DB832B4AC741345159B6
CE8BBB3B9A824CDE32D6E54E8E2DB73CC33C900B47890AC57EA406B2B1C1C7AF
4173D98D205C315B39CBD92F24C88CF6AB0EAC7D144151181081CB50E6D23F79
44F2B0FC64C5355A09869CB1F4FA9A8CFCDF63FFCD9856F22C55A8E9C9F48E39
77AA07FB3A84E02FCCFEA670D1B22DD104E44015048E25558F99B0113EC2A6C3
FFB57E5883B1235AC04353F76EBAF9B315D0258F0314DA293F6176150D26C488
293A359D11BEF761A19A90F1525BB308B0B32996265B11B62D96256205ED9875
094A00668B0C35CFDA92706AEE790FB37C630B5D01B3669A985D973A2952DC52
12C4BF81AD19EC17BBB83EDAE0BAEE414E58317D46B795F14D957A3F0363881F
4917799426F6382B86B9636A2CBE348FD09136ADD62DF2F048A9635438CBF029
6981AC94405347802CDAF5B71B02810FC306FEFC6DB03D4C2B97D94B90D07637
7EAFC9F3C0C80A861A20350A29878E1CA49D107D166A5A7DAAA3F8429F50B93B
CACBAB5EBB2CBA16B9B23A2C178F761EBDE6481C3AC89BFF8AFBB828413B05B7
FF27E3957DCF6F49B5A418F8C4C366922B20C0AF89866BCB8340BEEE9DEB795A
77C9544563D80713BB409FF6CEBF81FBC9A033DAD6486A00C96C21CAE0EB42CE
7BDF6A9870D3C572A217629A1E0563EAD67C4F746451EC37D3782ADD74FA239F
E15CE82316C8862DD3B3DD491985015C913F25E79B7CE6E923032FFC7EDCC50A
73FA91C092E5DECFC4BB710FCE0F4331351A84363522A9773F54F67968A8DF48
1C71E7208238BB4640EF6CA169769DFCFFE19D952571E4201AE2BC8734418862
4AA9FA2B8A7083BFA467FD97DFE358C51A1290E4313749E436516518EAD86450
4838A9262549E1EF8138A0DCE57ADC6E7A7AE0B21F5DDBFF2FD781072FBA7357
B321E041C8965F66345CC2E58DF24AF1D81A3245DC5E086AC9B73ABD5FB3B94B
C16AA92E9B11DC4B8DA382B49547ABC2BDD4750EDB63A34C3BB18A4312134C79
41DBBEF92D028D1969F2D93634A706192087D6AE20C4817FAEEA44432BB9FFCE
C5E025A5EC9A079E5FC8F10E9652575309AD90FC8487357AD331A88A686213E4
3CDCDAE0CE6246D04B5B03DA2D8DC02F4A78958CD013EE093F25F98BE37F4B7E
4A83CB43E7E6D465C287640C8599A09C9A07B9641F8673FA3422B63135CBE2C5
FFB3E9AD2E8D641E5BAECFDC13FD71922138BC422FE146752D480CD32B019F70
FDF530CB138E018713C1C6D66B04C797D167E3F44CDDEE379246588201548BBF
1283D4DE966F814072BEBE1EDC9E423CF08BD686BF290F93EC0F3C4772DEA6CF
EA35B88A35B5B159595C5BA3AE254AE97A83E7EF104E7217718271138E0052A5
C9430669045B8534B0BE80B44F630829E62ADFAF5D0F946D07B710A270604D53
D602173E8DD7EA00D0045B2602757C2C45B7EBBB93D0BFEB860F91AADB6A1731
3FBAB4106C05F3201FE2BDBECCE2A98DECF6E83665D2AC11ED477ADDEE0F1A68
F03D17E3D15A992F98E98CE85DBC6D8C089B2CFD529E53A47EAA64E0D623BC33
0E9B69A3864F2D6E720080ED58C12FD0F97946DEEBC8FB9C2EAA30A0D24B484F
65D14892B8B42F988764FF8C969AB4E5F1488B68A645AF5FE76455BB3BE17322
381C490469D0700AC0646EFEEC3DD4030DC26FA02F4588FF0EC44D4F0FE3595C
5D7E2FE5BE03D9D4961D9B98AE6BD423DB4D6C02E8F0E8147CD51F5DAAAE8494
2D2E68EBA6D90683DA1CDC4D889290377B7D4BFB7151413739217400613B621E
D2F05B83003308ED8238378E6B471C922C047A674CA62AB87BA351F465469406
31851181D01B12FB7750051B94D7EEE379F5A3008F1CDEA2F9AB43FC6F1E089D
7574F6FD38CA7F97D51111D15A64EEF297841FB5C539C7250D458ACD819FEBDC
6BEFC5333CE09B529B39BE38B5513808B2622B2537C2D2815C15D8F6BF8EB13B
5D4C57AE97005B830443A41BF44ACE6F83CB4FD0215186B2440FEFB6E284BA03
AD9419C033B4E81ACCEAFA56D5B5B3909C9B3B9FEAFD7CB6CF947340E30566D5
4A48B6EF7A585BADB637CA38DFE9F8A29E5198EE381F56A9B81DAC2FB38F4A88
151C57E0D363F0438E8E945787938B15A9B4D9ABBEA748CC8E10AC5FEBDA449D
DC5189AA594763A0FA27BFD16B2AD982B808EFA363A6FDABDD70CAC24BC3A0F3
EC0AF4AFD5A37477DF17A66E39928420C9734656B6DB574D19901F86E6B5A735
A1EC89004C24B5A673B93CAB914880162B5DD1596AB07A1C2CA7138A2BE36B28
9B4D905271C9152647F3621168F6DC36CC205A1E8C279121E1EFC8F7A254DC1E
7B3B52B0E6B67C5693FE7E77CF69F1B3BF2A6650C342954109958FDB85B62FDC
A18D195AD99DCC59F78593932EDCDCEC2B1126C393A81F4CD58149EA28CE3F9F
6847A58E63A1ECF6B1AB284D1102B2B1918BE2878B60A539E0889E8FDE232A4E
C4A6B77B352656F6D310C9DB8AB063BA18681B81990D9215B297D49227B69B26
4201A0DBC59DA1965256A6E7B1FD2833AD0DB3805E4B9969D179DD9BC9ACCBCB

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (thesis.dvi)
@start /Fa 138[61 59 1[60 2[63 6[61 6[61 46[55 55 4[32
44[{}9 99.6264 /CMCSC10 rf /Fb 240[50 15[{}1 99.6264
/CMSY10 rf /Fc 135[45 2[52 32 40 41 2[50 55 80 25 2[30
50 1[30 45 1[45 1[50 19[87 9[70 1[72 20[30 44[{}19 99.6264
/CMTI12 rf /Fd 132[49 43 51 51 70 51 54 38 38 38 51 54
49 54 81 27 51 30 27 54 49 30 43 54 43 54 49 3[27 1[27
5[73 70 54 72 1[66 1[73 89 1[76 50 35 73 77 64 1[75 70
69 73 6[27 49 49 49 49 49 49 49 49 49 49 1[27 33 27 2[38
38 27[54 12[{}63 99.6264 /CMR12 rf /Fe 134[123 1[168
1[129 90 92 95 1[129 116 129 194 65 123 71 65 129 116
71 106 129 103 129 113 10[175 1[162 1[173 1[159 1[182
1[140 2[87 2[146 1[178 168 165 175 11[116 116 116 116
116 49[{}39 206.559 /CMBX12 rf /Ff 134[59 59 81 59 62
44 44 46 59 62 56 62 93 31 59 34 31 62 56 34 51 62 50
62 54 10[85 86 78 62 84 1[77 1[88 1[67 88 1[42 88 1[70
74 86 81 80 85 6[31 2[56 56 56 56 56 56 56 56 56 34[62
12[{}53 99.6264 /CMBX12 rf /Fg 135[71 120[{}1 119.552
/CMBX12 rf /Fh 134[85 3[90 63 64 66 2[81 90 134 45 2[45
90 2[74 1[72 1[78 12[112 90 30[81 81 81 81 2[45 46[{}21
143.462 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 227 -89 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end

227 -89 a 227 -89 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 227 -89 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1603 611 a Fh(Thesis)53 b(title)1747 1630
y Fg(xxx)45 b(xxx)521 2295 y Ff(A)37 b(thesis)h(submitted)g(in)g
(partial)g(ful\014llmen)m(t)h(of)f(the)f(requiremen)m(ts)1592
2488 y(for)g(the)h(degree)g(of)1477 2680 y(Do)s(ctor)e(of)i(Philosoph)m
(y)995 3700 y(Principal)g(Sup)s(ervisor:)51 b(Professor)37
b(xxx)h(xxx)1247 4129 y(Hong)f(Kong)h(Baptist)f(Univ)m(ersit)m(y)1688
4558 y(August)g(20xx)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1451 824 a Fe(Declaration)227 1349 y Fd(I)39
b(declare)h(that)f(this)h(thesis)g(has)f(b)s(een)h(comp)s(osed)g(b)m(y)
g(m)m(yself)h(under)f(the)g(guidance)f(of)g(m)m(y)227
1541 y(principal)e(sup)s(ervisor)g(professor)g(xxx)h(and)e(co-sup)s
(ervisor)h(professor)g(xxx.)55 b(The)37 b(thesis)h(has)227
1734 y(not)32 b(previously)i(included)f(in)f(an)m(y)h(thesis,)h
(dissertation)f(or)e(rep)s(ort)h(submitted)i(to)d(an)m(y)i(insti-)227
1926 y(tution)h(for)f(a)h(degree,)h(diploma)g(or)e(other)h
(quali\014cation.)49 b(All)34 b(sources)h(of)f(information)g(ha)m(v)m
(e)227 2119 y(b)s(een)f(ac)m(kno)m(wledged)i(b)m(y)f(means)f(of)f
(references)j(to)d(the)h(relev)-5 b(an)m(t)34 b(publications.)2392
2548 y(Signature:)p 2825 2564 945 4 v 2352 2740 a(August)g(20xx)p
0 TeXcolorgray 1985 5829 a(i)p 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1357 824 a Fe(Abstract)-9 1349 y Fd(blabla)32
b(.)16 b(.)g(.)-9 1777 y Ff(Keyw)m(ords:)43 b Fd(k)m(eyw)m(ord1,)35
b(k)m(eyw)m(ord2,)g(k)m(eyw)m(ord3,)f(.)16 b(.)g(.)p
0 TeXcolorgray 1735 5829 a(ii)p 0 TeXcolorgray eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 1034 824 a Fe(Ac)-6 b(kno)g(wledgemen)g(ts)227
1349 y Fd(Thank)33 b(y)m(our)h(sup)s(ervisors.)373 1541
y(Thank)g(y)m(our)f(colleagues.)373 1734 y(Thank)h(y)m(our)f(family)-8
b(.)p 0 TeXcolorgray 1958 5829 a(iii)p 0 TeXcolorgray
eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 824 a Fe(T)-19 b(able)76 b(of)i(Con)-6
b(ten)g(ts)-9 1452 y Ff(Declaration)2947 b(i)-9 1747
y(Abstract)3052 b(ii)-9 2043 y(Ac)m(kno)m(wledgemen)m(ts)2520
b(iii)-9 2339 y(T)-9 b(able)38 b(of)f(Con)m(ten)m(ts)2583
b(iv)-9 2634 y(List)37 b(of)h(T)-9 b(ables)2791 b(vi)-9
2930 y(List)37 b(of)h(Figures)2710 b(vii)-9 3226 y(Chapter)25
b(1)94 b(In)m(tro)s(duction)2295 b(1)137 3421 y Fd(1.1)99
b(section1)83 b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)p 0 TeXcolorgray 135 w(1)p 0 TeXcolorgray
137 3617 a(1.2)99 b(section2)83 b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 135 w(1)p
0 TeXcolorgray 137 3813 a(1.3)99 b(Summary)92 b(.)50
b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 135 w(1)p 0 TeXcolorgray -9 4109 a Ff(Chapter)25
b(2)94 b(Notations)2433 b(2)137 4305 y Fd(2.1)99 b(section1)83
b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 135 w(2)p 0 TeXcolorgray 137 4501 a(2.2)99
b(section2)83 b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)p 0 TeXcolorgray 135 w(2)p 0 TeXcolorgray
137 4697 a(2.3)99 b(Summary)92 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 135 w(2)p 0
TeXcolorgray -9 4992 a Ff(Chapter)25 b(3)94 b(Researc)m(h)38
b(Pro)6 b(ject)36 b(1)1979 b(3)137 5188 y Fd(3.1)99 b(section1)83
b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 135 w(3)p 0 TeXcolorgray 137 5384 a(3.2)99
b(section2)83 b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)p 0 TeXcolorgray 135 w(3)p 0 TeXcolorgray
137 5580 a(3.3)99 b(Summary)92 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 135 w(3)p 0
TeXcolorgray 0 TeXcolorgray 1723 5829 a(iv)p 0 TeXcolorgray
eop end
%%Page: 5 6
TeXDict begin 5 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 227 10 a Ff(Chapter)25 b(4)94 b(Researc)m(h)38
b(Pro)6 b(ject)37 b(2)1978 b(4)373 203 y Fd(4.1)99 b(section1)83
b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 135 w(4)p 0 TeXcolorgray 373 395 a(4.2)99
b(section2)83 b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)p 0 TeXcolorgray 135 w(4)p 0 TeXcolorgray
373 588 a(4.3)99 b(Summary)93 b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 135 w(4)p 0
TeXcolorgray 227 878 a Ff(Chapter)25 b(5)94 b(Conclusions)2333
b(5)227 1168 y(Bibliograph)m(y)2860 b(6)227 1459 y(Curriculum)38
b(Vitae)2620 b(7)p 0 TeXcolorgray 1973 5829 a Fd(v)p
0 TeXcolorgray eop end
%%Page: 6 7
TeXDict begin 6 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 824 a Fe(List)76 b(of)i(T)-19 b(ables)p
0 TeXcolorgray 1723 5829 a Fd(vi)p 0 TeXcolorgray eop
end
%%Page: 7 8
TeXDict begin 7 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 227 824 a Fe(List)76 b(of)i(Figures)p 0
TeXcolorgray 1946 5829 a Fd(vii)p 0 TeXcolorgray eop
end
%%Page: 1 9
TeXDict begin 1 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 227 824 a Fe(Chapter)78 b(1)227 1388 y(In)-6
b(tro)6 b(duction)227 1913 y Fd(A)32 b(brief)h(in)m(tro)s(duction)h(to)
e(this)h(c)m(hapter.)227 2356 y Fh(1.1)160 b(section1)227
2647 y Fd(A)32 b(sample)i(citation)f([1].)227 3089 y
Fh(1.2)160 b(section2)227 3480 y(1.3)g(Summary)227 3771
y Fd(Summarize)34 b(what)f(y)m(ou)g(ha)m(v)m(e)h(presen)m(ted)h(in)d
(this)i(c)m(hapter.)p 0 TeXcolorgray 1974 5829 a(1)p
0 TeXcolorgray eop end
%%Page: 2 10
TeXDict begin 2 9 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 824 a Fe(Chapter)77 b(2)-9 1388 y(Notations)-9
1913 y Fd(A)32 b(brief)h(in)m(tro)s(duction)g(to)g(this)g(c)m(hapter.)
-9 2356 y Fh(2.1)160 b(section1)-9 2647 y Fd(A)32 b(sample)i(citation)f
([1)o(].)-9 3089 y Fh(2.2)160 b(section2)-9 3480 y(2.3)g(Summary)-9
3771 y Fd(Summarize)34 b(what)e(y)m(ou)i(ha)m(v)m(e)g(presen)m(ted)g
(in)f(this)g(c)m(hapter.)p 0 TeXcolorgray 1738 5829 a(2)p
0 TeXcolorgray eop end
%%Page: 3 11
TeXDict begin 3 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 227 824 a Fe(Chapter)78 b(3)227 1388 y(Researc)-6
b(h)77 b(Pro)13 b(ject)78 b(1)227 1913 y Fd(A)32 b(brief)h(in)m(tro)s
(duction)h(to)e(this)h(c)m(hapter.)227 2356 y Fh(3.1)160
b(section1)227 2647 y Fd(A)32 b(sample)i(citation)f([1].)227
3089 y Fh(3.2)160 b(section2)227 3480 y(3.3)g(Summary)227
3771 y Fd(Summarize)34 b(what)f(y)m(ou)g(ha)m(v)m(e)h(presen)m(ted)h
(in)d(this)i(c)m(hapter.)p 0 TeXcolorgray 1974 5829 a(3)p
0 TeXcolorgray eop end
%%Page: 4 12
TeXDict begin 4 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -9 824 a Fe(Chapter)77 b(4)-9 1388 y(Researc)-6
b(h)77 b(Pro)13 b(ject)78 b(2)-9 1913 y Fd(A)32 b(brief)h(in)m(tro)s
(duction)g(to)g(this)g(c)m(hapter.)-9 2356 y Fh(4.1)160
b(section1)-9 2647 y Fd(A)32 b(sample)i(citation)f([1)o(].)-9
3089 y Fh(4.2)160 b(section2)-9 3480 y(4.3)g(Summary)-9
3771 y Fd(Summarize)34 b(what)e(y)m(ou)i(ha)m(v)m(e)g(presen)m(ted)g
(in)f(this)g(c)m(hapter.)p 0 TeXcolorgray 1738 5829 a(4)p
0 TeXcolorgray eop end
%%Page: 5 13
TeXDict begin 5 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 227 824 a Fe(Chapter)78 b(5)227 1388 y(Conclusions)p
0 TeXcolorgray 1974 5829 a Fd(5)p 0 TeXcolorgray eop
end
%%Page: 6 14
TeXDict begin 6 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -9 824 a Fe(Bibliograph)-6 b(y)p 0 TeXcolorgray
-9 1349 a Fd([1])p 0 TeXcolorgray 48 w(J.)46 b(Dean)g(and)g(S.)f(Ghema)
m(w)m(at.)84 b(Mapreduce:)71 b(Simpli\014ed)48 b(data)d(pro)s(cessing)i
(on)f(large)142 1541 y(clusters.)f Fc(Communic)-5 b(ations)34
b(of)g(the)h(A)n(CM)p Fd(,)e(51\(1\):107{113,)d(2008.)p
0 TeXcolorgray 1738 5829 a(6)p 0 TeXcolorgray eop end
%%Page: 7 15
TeXDict begin 7 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1138 824 a Fe(Curriculum)77 b(Vitae)227
1349 y Ff(P)m(ersonal)38 b(Data)p 227 1365 695 4 v 227
1541 a Fb(\017)65 b Fd(Name:)44 b(xxx)34 b(xxx)227 1734
y Fb(\017)65 b Fd(Date)32 b(of)g(Birth:)43 b(July)34
b(24,1989)227 1926 y Fb(\017)65 b Fd(Place)33 b(of)f(Birth:)44
b(xxx,)34 b(F)-8 b(ujian,)32 b(P)-8 b(.R.)33 b(China)227
2119 y Fb(\017)65 b Fd(Nationalit)m(y:)44 b(Chinese)227
2548 y Ff(Education)p 227 2564 496 4 v 227 2740 a Fb(\017)32
b Fd(Sept.)h(20xx)g(-)f(Jun.)i(20xx:)44 b(xxx)34 b(Departmen)m(t,)f
(xxx)h(Univ)m(ersit)m(y)-8 b(.)46 b(Ph.D.)33 b(candidate.)227
2933 y Fb(\017)f Fd(Sept.)h(20xx)g(-)f(July)-8 b(.)34
b(20xx:)44 b(xxx)34 b(Departmen)m(t,)f(xxx)h(Univ)m(ersit)m(y)-8
b(.)46 b(Master)34 b(of)e(xxx.)227 3126 y Fb(\017)g Fd(Sept.)h(19xx)g
(-)f(July)-8 b(.)34 b(20xx:)44 b(xxx)34 b(Departmen)m(t,)f(xxx)h(Univ)m
(ersit)m(y)-8 b(.)46 b(Bac)m(helor)34 b(of)e(xxx.)227
3555 y Ff(Conference)38 b(Presen)m(tation)p 227 3570
1202 4 v 227 3747 a Fb(\017)32 b Fd(August)h(20xx,)g
Fc(xxx)i(Confer)-5 b(enc)g(e,)31 b Fd(Beijing.)227 4176
y Ff(Published)38 b(and)h(Submitted)f(P)m(ap)s(ers)p
227 4211 1621 4 v 0 TeXcolorgray 346 4452 a Fd(1.)p 0
TeXcolorgray 49 w Fa(a)n(uthor1,)49 b(a)n(uthor2)p Fd(,)c
Fc(title)p Fd(,)f Ff(conference/journal)49 b(title)p
Fd(,)44 b(pageNo,)f(y)m(ear,)i(lo)s(ca-)471 4644 y(tion.)227
5156 y Ff(Aw)m(ards)p 227 5172 370 4 v 227 5349 a Fb(\017)32
b Fd(20xx-20xx,)h(xxx)h(Sc)m(holarship,)g(Hong)f(Kong)f(Baptist)h(Univ)
m(ersit)m(y)-8 b(.)p 0 TeXcolorgray 1974 5829 a(7)p 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
